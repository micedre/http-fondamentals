---
title: "Chapter 2: HTTP Methods"
subtitle: "Understanding REST Verbs and Their Semantics"
---

# HTTP Methods Overview

HTTP methods (also called verbs) define the action to be performed on a resource. Each method has specific semantics and use cases.

## The Main HTTP Methods

| Method  | Purpose              | Safe | Idempotent | Has Body |
|---------|---------------------|------|------------|----------|
| GET     | Retrieve resource   | Yes  | Yes        | No       |
| POST    | Create resource     | No   | No         | Yes      |
| PUT     | Replace resource    | No   | Yes        | Yes      |
| PATCH   | Modify resource     | No   | No         | Yes      |
| DELETE  | Remove resource     | No   | Yes        | No       |
| HEAD    | Get headers only    | Yes  | Yes        | No       |
| OPTIONS | Get allowed methods | Yes  | Yes        | No       |

```{mermaid}
graph TD
    A[HTTP Methods] --> B[Safe Methods]
    A --> C[Unsafe Methods]

    B --> D[GET]
    B --> E[HEAD]
    B --> F[OPTIONS]

    C --> G[POST]
    C --> H[PUT]
    C --> I[PATCH]
    C --> J[DELETE]

    K[Idempotent] --> D
    K --> E
    K --> F
    K --> H
    K --> J

    L[Not Idempotent] --> G
    L --> I

    style B fill:#c8e6c9
    style C fill:#ffccbc
    style K fill:#bbdefb
    style L fill:#fff9c4
```

### Key Concepts

- **Safe**: The method doesn't modify server state
- **Idempotent**: Multiple identical requests have the same effect as a single request
- **Has Body**: Whether the request can include a message body

## GET Method

GET retrieves data from the server. It should not modify any resources.

### Basic GET Request

```{hurl}
#| echo: true
#| output: true

GET https://httpbin.io/get
```

### GET with Query Parameters

```{hurl}
#| echo: true
#| output: true

GET https://httpbin.io/get?user=alice&role=admin&status=active
```

### GET with Path Parameters

```{hurl}
#| echo: true
#| output: true

GET https://httpbin.io/anything/users/123
```

### Why GET is Safe and Idempotent

- **Safe**: Reading data doesn't change it
- **Idempotent**: Calling GET 100 times returns the same result (assuming no external changes)

## POST Method

POST submits data to create a new resource. It's commonly used for form submissions and API calls.

### POST with JSON Data

```{hurl}
#| echo: true
#| output: true

POST https://httpbin.io/post
Content-Type: application/json

{
  "name": "Alice",
  "email": "alice@example.com",
  "role": "developer"
}
```

### POST with Form Data

```{hurl}
#| echo: true
#| output: true

POST https://httpbin.io/post
[FormParams]
username: alice
password: secret123
remember: true
```

### POST with Multiple Fields

```{hurl}
#| echo: true
#| output: true

POST https://httpbin.io/post
Content-Type: application/json

{
  "user": {
    "name": "Bob",
    "age": 30
  },
  "preferences": {
    "theme": "dark",
    "notifications": true
  },
  "tags": ["developer", "python", "http"]
}
```

### Why POST is Not Idempotent

Calling POST multiple times creates multiple resources:
```
POST /users → Creates user (ID: 1)
POST /users → Creates user (ID: 2)
POST /users → Creates user (ID: 3)
```

```{mermaid}
sequenceDiagram
    participant Client
    participant Server
    participant DB as Database

    Client->>Server: POST /users {name: "Alice"}
    Server->>DB: INSERT user (ID: 1)
    DB-->>Server: Created
    Server-->>Client: 201 Created (ID: 1)

    Client->>Server: POST /users {name: "Alice"}
    Server->>DB: INSERT user (ID: 2)
    DB-->>Server: Created
    Server-->>Client: 201 Created (ID: 2)

    Note over Client,DB: Same request creates different resources!
```

## PUT Method

PUT replaces an entire resource. It requires sending the complete representation.

### PUT to Update Resource

```{hurl}
#| echo: true
#| output: true

PUT https://httpbin.io/put
Content-Type: application/json

{
  "id": 123,
  "name": "Alice Updated",
  "email": "alice.new@example.com",
  "role": "senior-developer",
  "active": true
}
```

### Why PUT is Idempotent

Calling PUT multiple times with the same data results in the same final state:
```
PUT /users/123 {"name": "Alice"} → User 123 has name "Alice"
PUT /users/123 {"name": "Alice"} → User 123 has name "Alice" (same result)
PUT /users/123 {"name": "Alice"} → User 123 has name "Alice" (same result)
```

### PUT vs POST

- **PUT**: Usually for updates, targets a specific resource (`PUT /users/123`)
- **POST**: Usually for creation, targets a collection (`POST /users`)
- **PUT**: Idempotent (same result each time)
- **POST**: Not idempotent (may create multiple resources)

```{mermaid}
graph LR
    A[Client wants to save data] --> B{Know the exact resource URI?}

    B -->|Yes| C[Use PUT]
    B -->|No| D[Use POST]

    C --> E[PUT /users/123]
    D --> F[POST /users]

    E --> G[Replace entire resource]
    F --> H[Server assigns new ID]

    G --> I[Idempotent ✓]
    H --> J[Not Idempotent ✗]

    style C fill:#a5d6a7
    style D fill:#ffcc80
```

## PATCH Method

PATCH applies partial modifications to a resource. Unlike PUT, you only send the fields to update.

### PATCH for Partial Update

```{hurl}
#| echo: true
#| output: true

PATCH https://httpbin.io/patch
Content-Type: application/json

{
  "email": "alice.updated@example.com"
}
```

### PATCH with JSON Patch Format

```{hurl}
#| echo: true
#| output: true

PATCH https://httpbin.io/patch
Content-Type: application/json-patch+json

[
  { "op": "replace", "path": "/email", "value": "newemail@example.com" },
  { "op": "add", "path": "/phone", "value": "+1234567890" }
]
```

### PUT vs PATCH

```{hurl}
#| echo: true
#| output: true

# PUT: Must send complete resource
PUT https://httpbin.io/put
Content-Type: application/json

{
  "name": "Alice",
  "email": "alice@example.com",
  "role": "developer",
  "active": true
}
```

```{hurl}
#| echo: true
#| output: true

# PATCH: Only send what changes
PATCH https://httpbin.io/patch
Content-Type: application/json

{
  "email": "alice@example.com"
}
```

## DELETE Method

DELETE removes a resource from the server.

### Basic DELETE Request

```{hurl}
#| echo: true
#| output: true

DELETE https://httpbin.io/delete
```

### DELETE with Specific Resource

```{hurl}
#| echo: true
#| output: true

DELETE https://httpbin.io/anything/users/123
```

### Why DELETE is Idempotent

Deleting the same resource multiple times has the same effect:
```
DELETE /users/123 → User deleted
DELETE /users/123 → User already gone (same final state)
DELETE /users/123 → User already gone (same final state)
```

The second and third calls might return 404 (Not Found), but the final state is the same: the resource doesn't exist.

## HEAD Method

HEAD is identical to GET but returns only the headers, not the body. It's useful for checking if a resource exists or getting metadata.

### HEAD Request

```{hurl}
#| echo: true
#| output: true

HEAD https://httpbin.io/get
```

Notice: No response body is returned, only status and headers.

### Use Cases for HEAD

- Check if a resource exists (without downloading it)
- Get the size of a file before downloading (`Content-Length` header)
- Check last modification time (`Last-Modified` header)
- Verify link validity

## OPTIONS Method

OPTIONS returns the HTTP methods supported by a resource. It's crucial for CORS (Cross-Origin Resource Sharing).

### OPTIONS Request

```{hurl}
#| echo: true
#| output: true

OPTIONS https://httpbin.io/get
```

Look for the `Access-Control-Allow-Methods` header in the response, which lists allowed methods.

### CORS Preflight Request

Browsers send OPTIONS automatically before certain cross-origin requests:

```{hurl}
#| echo: true
#| output: true

OPTIONS https://httpbin.io/post
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type
Origin: https://example.com
```

## Less Common Methods

### TRACE

TRACE echoes back the received request, useful for debugging:

```{hurl}
#| echo: true
#| output: true

# Note: httpbin doesn't support TRACE, so this may not work
GET https://httpbin.io/get
X-Custom-Header: debug-trace
```

### CONNECT

CONNECT establishes a tunnel, typically used for HTTPS through proxies. Not commonly used in APIs.

## Method Safety and Idempotency Summary

### Safe Methods (No Side Effects)
- GET
- HEAD
- OPTIONS

Safe methods can be called without worrying about changing server state.

### Idempotent Methods (Same Result Each Time)
- GET
- PUT
- DELETE
- HEAD
- OPTIONS

Idempotent methods can be safely retried if there's a network failure.

### Neither Safe Nor Idempotent
- POST
- PATCH (typically)

These methods require careful handling and may need special retry logic.

## Best Practices

1. **Use GET for retrieval**: Never use GET to modify data
2. **Use POST for creation**: Create new resources with POST
3. **Use PUT for full replacement**: Send complete resource representation
4. **Use PATCH for partial updates**: Send only changed fields
5. **Use DELETE for removal**: Remove resources with DELETE
6. **Respect idempotency**: Design APIs where PUT and DELETE are truly idempotent
7. **Use proper status codes**: Return appropriate codes for each method

## Real-World API Example

Here's a complete CRUD (Create, Read, Update, Delete) example:

```{mermaid}
flowchart TD
    A[CRUD Operations] --> B[Create]
    A --> C[Read]
    A --> D[Update]
    A --> E[Delete]

    B --> F[POST /users]
    C --> G[GET /users/:id]
    D --> H[PUT /users/:id]
    D --> I[PATCH /users/:id]
    E --> J[DELETE /users/:id]

    F --> K[201 Created]
    G --> L[200 OK]
    H --> M[200 OK]
    I --> M
    J --> N[204 No Content]

    style B fill:#c8e6c9
    style C fill:#bbdefb
    style D fill:#fff9c4
    style E fill:#ffccbc
```

```{hurl}
#| echo: true
#| output: true

# Create (POST)
POST https://httpbin.io/anything/users
Content-Type: application/json

{
  "name": "Charlie",
  "email": "charlie@example.com"
}
```

```{hurl}
#| echo: true
#| output: true

# Read (GET)
GET https://httpbin.io/anything/users/123
```

```{hurl}
#| echo: true
#| output: true

# Update (PUT)
PUT https://httpbin.io/anything/users/123
Content-Type: application/json

{
  "name": "Charlie Updated",
  "email": "charlie.new@example.com"
}
```

```{hurl}
#| echo: true
#| output: true

# Partial Update (PATCH)
PATCH https://httpbin.io/anything/users/123
Content-Type: application/json

{
  "email": "charlie.newest@example.com"
}
```

```{hurl}
#| echo: true
#| output: true

# Delete (DELETE)
DELETE https://httpbin.io/anything/users/123
```

## Practice Exercises

Try these on your own:

1. Send a POST request with nested JSON data
2. Send a PUT request and then send the same request again - verify it's idempotent
3. Use HEAD to check if `https://httpbin.io/status/200` is accessible
4. Send an OPTIONS request and examine the allowed methods
5. Compare the difference between PUT and PATCH with different payloads

## Key Takeaways

- **GET**: Retrieve data, safe and idempotent
- **POST**: Create new resources, not idempotent
- **PUT**: Replace entire resource, idempotent
- **PATCH**: Partial update, typically not idempotent
- **DELETE**: Remove resource, idempotent
- **HEAD**: Get headers only, safe and idempotent
- **OPTIONS**: Get allowed methods, used in CORS

## Next Steps

Now that you understand HTTP methods, let's explore how headers control request and response behavior in [Chapter 3: HTTP Headers](03-http-headers.qmd).

---

## RFC References

This chapter covers concepts from the following RFCs:

::: {.callout-note icon=false}
### HTTP Methods Specification

- **[RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html)** - HTTP Semantics
  - Section 9: [Methods](https://www.rfc-editor.org/rfc/rfc9110.html#section-9)
  - Section 9.1: [Overview](https://www.rfc-editor.org/rfc/rfc9110.html#section-9.1)
  - Section 9.2: [Common Method Properties](https://www.rfc-editor.org/rfc/rfc9110.html#section-9.2)
    - 9.2.1: [Safe Methods](https://www.rfc-editor.org/rfc/rfc9110.html#section-9.2.1)
    - 9.2.2: [Idempotent Methods](https://www.rfc-editor.org/rfc/rfc9110.html#section-9.2.2)
  - Section 9.3: [Method Definitions](https://www.rfc-editor.org/rfc/rfc9110.html#section-9.3)
    - 9.3.1: [GET](https://www.rfc-editor.org/rfc/rfc9110.html#GET)
    - 9.3.2: [HEAD](https://www.rfc-editor.org/rfc/rfc9110.html#HEAD)
    - 9.3.3: [POST](https://www.rfc-editor.org/rfc/rfc9110.html#POST)
    - 9.3.4: [PUT](https://www.rfc-editor.org/rfc/rfc9110.html#PUT)
    - 9.3.5: [DELETE](https://www.rfc-editor.org/rfc/rfc9110.html#DELETE)
    - 9.3.6: [CONNECT](https://www.rfc-editor.org/rfc/rfc9110.html#CONNECT)
    - 9.3.7: [OPTIONS](https://www.rfc-editor.org/rfc/rfc9110.html#OPTIONS)
    - 9.3.8: [TRACE](https://www.rfc-editor.org/rfc/rfc9110.html#TRACE)

### PATCH Method

- **[RFC 5789](https://www.rfc-editor.org/rfc/rfc5789.html)** - PATCH Method for HTTP
:::
