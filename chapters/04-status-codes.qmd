---
title: "Chapter 4: HTTP Status Codes"
subtitle: "Understanding Server Responses"
---

# Introduction to Status Codes

HTTP status codes are three-digit numbers that indicate the result of an HTTP request. They're divided into five classes based on the first digit.




## Status Code Classes

| Class | Range | Meaning |
|-------|-------|---------|
| 1xx   | 100-199 | Informational - Request received, continuing |
| 2xx   | 200-299 | Success - Request successfully processed |
| 3xx   | 300-399 | Redirection - Further action needed |
| 4xx   | 400-499 | Client Error - Request contains errors |
| 5xx   | 500-599 | Server Error - Server failed to fulfill request |

```{mermaid}
graph TD
    A[HTTP Status Code] --> B[1xx Informational]
    A --> C[2xx Success]
    A --> D[3xx Redirection]
    A --> E[4xx Client Error]
    A --> F[5xx Server Error]

    B --> B1[100 Continue<br/>101 Switching Protocols]
    C --> C1[200 OK<br/>201 Created<br/>204 No Content]
    D --> D1[301 Moved Permanently<br/>302 Found<br/>304 Not Modified]
    E --> E1[400 Bad Request<br/>401 Unauthorized<br/>404 Not Found]
    F --> F1[500 Internal Server Error<br/>502 Bad Gateway<br/>503 Service Unavailable]

    style B fill:#e3f2fd
    style C fill:#c8e6c9
    style D fill:#fff9c4
    style E fill:#ffccbc
    style F fill:#f8bbd0
```



 1xx Informational

These codes indicate that the request was received and is being processed.



### 100 Continue

Tells the client to continue sending the request body:
httpbin.io returns 200, but 100 would be used for large uploads

```{hurl}




POST https://httpbin.io/post
Expect: 100-continue
Content-Type: application/json

{
  "data": "large payload"
}
```



### 101 Switching Protocols

Used when upgrading to WebSocket or HTTP/2:

```{hurl}



GET https://httpbin.io/get
```



 2xx Success

These codes indicate the request was successfully received, understood, and accepted.



### 200 OK

Standard success response:

```{hurl}



GET https://httpbin.io/status/200
```



### 201 Created

Resource successfully created:

```{hurl}



POST https://httpbin.io/status/201
Content-Type: application/json

{
  "name": "New Resource",
  "type": "example"
}
```

Typically includes a `Location` header pointing to the new resource.



### 202 Accepted

Request accepted but not yet processed (async operations):

```{hurl}



POST https://httpbin.io/status/202
Content-Type: application/json

{
  "job": "long-running-task"
}
```



### 204 No Content

Success with no response body:

```{hurl}



DELETE https://httpbin.io/status/204
```

Useful for DELETE operations or updates where no data needs to be returned.



### 206 Partial Content

Returns partial content (range requests):

```{hurl}

%%verbose
%%output=partial.bin

GET https://httpbin.io/bytes/1000
Range: bytes=0-499
```



### 3xx Redirection

These codes indicate that further action is needed to complete the request.



### 301 Moved Permanently

Resource permanently moved to a new URL:

```{hurl}



GET https://httpbin.io/status/301
```



### 302 Found

Temporary redirect:

```{hurl}



GET https://httpbin.io/status/302
```



### 303 See Other

Redirect after POST to prevent duplicate submissions:

```{hurl}



GET https://httpbin.io/status/303
```



### 304 Not Modified

Resource hasn't changed (used with conditional requests):

```{hurl}



GET https://httpbin.io/status/304
```



### 307 Temporary Redirect

Similar to 302, but guarantees the method won't change:

```{hurl}



GET https://httpbin.io/status/307
```



### 308 Permanent Redirect

Similar to 301, but guarantees the method won't change:

```{hurl}



GET https://httpbin.io/status/308
```



### Redirect Differences

301/302: May change POST to GET on redirect


```{hurl}

POST https://httpbin.io/status/301
Content-Type: application/json

{"test": "data"}
```



307/308: Preserve method and body on redirect

```{hurl}



POST https://httpbin.io/status/307
Content-Type: application/json

{"test": "data"}
```



### 4xx Client Errors

These codes indicate the client made an error in the request.



### 400 Bad Request

Malformed request syntax:

```{hurl}



GET https://httpbin.io/status/400
```



### 401 Unauthorized

Authentication required or failed:

```{hurl}



GET https://httpbin.io/status/401
```

Despite the name, this means "unauthenticated" - you need to provide credentials.



### 403 Forbidden

Authenticated but not authorized:

```{hurl}



GET https://httpbin.io/status/403
```

The server understood the request but refuses to fulfill it.



### 401 vs 403


401: "Who are you?" - Need to login

```{hurl}




GET https://httpbin.io/status/401
```





403: "I know who you are, but you can't do that"
```{hurl}

GET https://httpbin.io/status/403
```



### 404 Not Found

Resource doesn't exist:

```{hurl}



GET https://httpbin.io/status/404
```



### 405 Method Not Allowed

HTTP method not supported for this resource:

```{hurl}



GET https://httpbin.io/status/405
```

Should include an `Allow` header listing valid methods.



### 406 Not Acceptable

Server can't produce content matching the Accept headers:

```{hurl}



GET https://httpbin.io/status/406
```



### 408 Request Timeout

Client didn't send request within server's timeout:

```{hurl}



GET https://httpbin.io/status/408
```



### 409 Conflict

Request conflicts with current state (e.g., duplicate resource):

```{hurl}



POST https://httpbin.io/status/409
Content-Type: application/json

{
  "username": "already-taken"
}
```



### 410 Gone

Resource permanently deleted:

```{hurl}



GET https://httpbin.io/status/410
```



### 411 Length Required

`Content-Length` header required:

```{hurl}



GET https://httpbin.io/status/411
```



### 412 Precondition Failed

Conditional headers failed (e.g., `If-Match`):

```{hurl}



GET https://httpbin.io/status/412
```



### 413 Payload Too Large

Request body exceeds server limits:

```{hurl}



GET https://httpbin.io/status/413
```



### 414 URI Too Long

URL exceeds server limits:

```{hurl}



GET https://httpbin.io/status/414
```



### 415 Unsupported Media Type

Content-Type not supported:

```{hurl}



POST https://httpbin.io/status/415
Content-Type: application/unsupported

"unsupported data"
```



### 416 Range Not Satisfiable

Requested range is invalid:

```{hurl}



GET https://httpbin.io/status/416
```



### 422 Unprocessable Entity

Syntax correct but semantically invalid:

```{hurl}



POST https://httpbin.io/status/422
Content-Type: application/json

{
  "age": -5,
  "email": "invalid-email"
}
```



### 429 Too Many Requests

Rate limit exceeded:

```{hurl}



GET https://httpbin.io/status/429
```

Should include `Retry-After` header.



### 431 Request Header Fields Too Large

Headers exceed server limits:

```{hurl}



GET https://httpbin.io/status/431
```



 5xx Server Errors

These codes indicate the server encountered an error.



### 500 Internal Server Error

Generic server error:

```{hurl}



GET https://httpbin.io/status/500
```



### 501 Not Implemented

Server doesn't support the requested functionality:

```{hurl}



GET https://httpbin.io/status/501
```



### 502 Bad Gateway

Gateway/proxy received invalid response from upstream:

```{hurl}



GET https://httpbin.io/status/502
```



### 503 Service Unavailable

Server temporarily unavailable (maintenance, overload):

```{hurl}



GET https://httpbin.io/status/503
```

Should include `Retry-After` header.



### 504 Gateway Timeout

Gateway/proxy didn't receive timely response:

```{hurl}



GET https://httpbin.io/status/504
```



### 505 HTTP Version Not Supported

HTTP version not supported by server:

```{hurl}



GET https://httpbin.io/status/505
```




## Testing Any Status Code

httpbin.io allows testing any status code:

```{hurl}




GET https://httpbin.io/status/418
```

```{hurl}




GET https://httpbin.io/status/451
```






##### Choosing the Right Status Code

### For Successful Operations

- **200**: Generic success (GET, PUT, PATCH with body)
- **201**: Resource created (POST)
- **202**: Accepted for processing (async operations)
- **204**: Success with no content (DELETE, PUT/PATCH without body)



#### For Client Errors

- **400**: Invalid request format
- **401**: Need authentication
- **403**: Authenticated but not authorized
- **404**: Resource not found
- **409**: Conflict (duplicate, version mismatch)
- **422**: Validation failed
- **429**: Rate limited



#### For Server Errors

- **500**: Internal error
- **502**: Bad gateway
- **503**: Temporarily unavailable
- **504**: Gateway timeout




## Status Codes with Response Bodies

You can combine status codes with response bodies:

200 with JSON body


```{hurl}




GET https://httpbin.io/json
```

```{hurl}




GET https://httpbin.io/status/400
```




## Best Practices

1. **Use appropriate codes**: Choose the most specific status code
2. **Be consistent**: Use the same codes for similar situations
3. **Include details**: Provide error details in response body
4. **Document codes**: List possible status codes in API docs
5. **Don't misuse codes**: Don't return 200 for errors
6. **Handle redirects**: Follow 3xx redirects appropriately
7. **Retry logic**: Implement retry for 429, 503, 504






##### Common Mistakes

### Returning 200 for Errors

```{hurl}
GET https://httpbin.io/status/404
```



#### Wrong Error Code

```{hurl}
GET https://httpbin.io/status/401
```

```{hurl}
GET https://httpbin.io/status/403
```




## Error Response Format

While httpbin.io responses vary, here's a good error format:

```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid email format",
    "details": [
      {
        "field": "email",
        "issue": "Must be valid email address"
      }
    ]
  }
}
```




## Decision Tree

```{mermaid}
flowchart TD
    A[Request Received] --> B{Successful?}

    B -->|Yes| C{What happened?}
    C -->|Returning data| D[200 OK]
    C -->|Created resource| E[201 Created]
    C -->|Accepted for later| F[202 Accepted]
    C -->|Success but no content| G[204 No Content]

    B -->|No| H{Whose fault?}

    H -->|Client Error| I{What's wrong?}
    I -->|Bad syntax| J[400 Bad Request]
    I -->|Not authenticated| K[401 Unauthorized]
    I -->|Not authorized| L[403 Forbidden]
    I -->|Not found| M[404 Not Found]
    I -->|Wrong method| N[405 Method Not Allowed]
    I -->|Validation failed| O[422 Unprocessable Entity]
    I -->|Rate limited| P[429 Too Many Requests]

    H -->|Server Error| Q{What happened?}
    Q -->|Generic error| R[500 Internal Server Error]
    Q -->|Not implemented| S[501 Not Implemented]
    Q -->|Gateway error| T[502 Bad Gateway]
    Q -->|Temporarily down| U[503 Service Unavailable]
    Q -->|Gateway timeout| V[504 Gateway Timeout]

    style D fill:#c8e6c9
    style E fill:#c8e6c9
    style F fill:#c8e6c9
    style G fill:#c8e6c9
    style J fill:#ffccbc
    style K fill:#ffccbc
    style L fill:#ffccbc
    style M fill:#ffccbc
    style N fill:#ffccbc
    style O fill:#ffccbc
    style P fill:#ffccbc
    style R fill:#f8bbd0
    style S fill:#f8bbd0
    style T fill:#f8bbd0
    style U fill:#f8bbd0
    style V fill:#f8bbd0
```




Try these on your own:

1. Request different status codes and observe the responses
2. Send a conditional request and get a 304 response
3. Test rate limiting scenarios with 429
4. Compare 301 vs 307 redirect behavior
5. Understand when to use 401 vs 403




- **1xx**: Informational (rare in typical usage)
- **2xx**: Success (200, 201, 204 most common)
- **3xx**: Redirection (301, 302, 304 most common)
- **4xx**: Client error (400, 401, 403, 404, 422, 429 most common)
- **5xx**: Server error (500, 502, 503, 504 most common)
- Use specific codes rather than generic ones
- Include helpful error messages in response bodies
- Document expected status codes in API documentation




Now that you understand status codes, let's explore request and response bodies in detail in [Chapter 5: Request & Response](05-request-response.qmd).

---

## RFC References

This chapter covers concepts from the following RFCs:

::: {.callout-note icon=false}
### HTTP Status Codes

- **[RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html)** - HTTP Semantics
  - Section 15: [Status Codes](https://www.rfc-editor.org/rfc/rfc9110.html#section-15)
  - Section 15.1: [Overview of Status Codes](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.1)
  - **Section 15.2: [Informational 1xx](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.2)**
    - 15.2.1: [100 Continue](https://www.rfc-editor.org/rfc/rfc9110.html#status.100)
    - 15.2.2: [101 Switching Protocols](https://www.rfc-editor.org/rfc/rfc9110.html#status.101)
  - **Section 15.3: [Successful 2xx](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.3)**
    - 15.3.1: [200 OK](https://www.rfc-editor.org/rfc/rfc9110.html#status.200)
    - 15.3.2: [201 Created](https://www.rfc-editor.org/rfc/rfc9110.html#status.201)
    - 15.3.3: [202 Accepted](https://www.rfc-editor.org/rfc/rfc9110.html#status.202)
    - 15.3.5: [204 No Content](https://www.rfc-editor.org/rfc/rfc9110.html#status.204)
  - **Section 15.4: [Redirection 3xx](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.4)**
    - 15.4.2: [301 Moved Permanently](https://www.rfc-editor.org/rfc/rfc9110.html#status.301)
    - 15.4.3: [302 Found](https://www.rfc-editor.org/rfc/rfc9110.html#status.302)
    - 15.4.5: [304 Not Modified](https://www.rfc-editor.org/rfc/rfc9110.html#status.304)
    - 15.4.8: [307 Temporary Redirect](https://www.rfc-editor.org/rfc/rfc9110.html#status.307)
    - 15.4.9: [308 Permanent Redirect](https://www.rfc-editor.org/rfc/rfc9110.html#status.308)
  - **Section 15.5: [Client Error 4xx](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.5)**
    - 15.5.1: [400 Bad Request](https://www.rfc-editor.org/rfc/rfc9110.html#status.400)
    - 15.5.2: [401 Unauthorized](https://www.rfc-editor.org/rfc/rfc9110.html#status.401)
    - 15.5.4: [403 Forbidden](https://www.rfc-editor.org/rfc/rfc9110.html#status.403)
    - 15.5.5: [404 Not Found](https://www.rfc-editor.org/rfc/rfc9110.html#status.404)
    - 15.5.6: [405 Method Not Allowed](https://www.rfc-editor.org/rfc/rfc9110.html#status.405)
    - 15.5.20: [429 Too Many Requests](https://www.rfc-editor.org/rfc/rfc9110.html#status.429)
  - **Section 15.6: [Server Error 5xx](https://www.rfc-editor.org/rfc/rfc9110.html#section-15.6)**
    - 15.6.1: [500 Internal Server Error](https://www.rfc-editor.org/rfc/rfc9110.html#status.500)
    - 15.6.2: [501 Not Implemented](https://www.rfc-editor.org/rfc/rfc9110.html#status.501)
    - 15.6.3: [502 Bad Gateway](https://www.rfc-editor.org/rfc/rfc9110.html#status.502)
    - 15.6.4: [503 Service Unavailable](https://www.rfc-editor.org/rfc/rfc9110.html#status.503)
    - 15.6.5: [504 Gateway Timeout](https://www.rfc-editor.org/rfc/rfc9110.html#status.504)
:::
