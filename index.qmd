---
title: "HTTP Fundamentals Training"
subtitle: "Master the HTTP Protocol with Interactive Examples"
---

# Welcome to HTTP Fundamentals

This comprehensive training course will teach you everything you need to know about the Hypertext Transfer Protocol (HTTP), the foundation of data communication on the World Wide Web.

## What You'll Learn

Throughout this course, you'll gain hands-on experience with:

- **HTTP Protocol Basics**: Understand how HTTP works at a fundamental level
- **Request Methods**: Master GET, POST, PUT, DELETE, PATCH, and more
- **HTTP Headers**: Learn how headers control request and response behavior
- **Status Codes**: Decode the meaning behind 200, 404, 500, and all other codes
- **Request & Response Bodies**: Work with JSON, form data, and other formats
- **Authentication**: Implement Basic Auth, Bearer tokens, and API keys
- **Advanced Topics**: Explore CORS, caching, compression, and HTTP/2

## Interactive Learning with Hurl

All examples in this course use [Hurl](https://hurl.dev/), a command-line tool for running and testing HTTP requests. You can run these examples directly in this documentation!

### Your First HTTP Request

Let's start with a simple example - getting your IP address:

```{hurl}
#| echo: true
#| output: true

GET https://httpbin.io/ip
```

This request demonstrates:

- The **GET** method (retrieving data)
- The **URL** (https://httpbin.io/ip)
- The **response** showing your IP address in JSON format

## Course Structure

The course is organized into seven chapters, progressing from fundamentals to advanced topics:

1. **HTTP Basics** - Protocol overview, URLs, and the request/response cycle
2. **HTTP Methods** - Deep dive into GET, POST, PUT, DELETE, PATCH, HEAD, and OPTIONS
3. **HTTP Headers** - Common headers, custom headers, and their purposes
4. **Status Codes** - Understanding 1xx, 2xx, 3xx, 4xx, and 5xx responses
5. **Request & Response** - Working with different content types and payloads
6. **Authentication** - Securing your HTTP requests
7. **Advanced Topics** - CORS, caching, compression, and modern HTTP features

## Prerequisites

To get the most out of this course, you should have:

- Basic understanding of client-server architecture
- Familiarity with JSON format
- A web browser (for the httpbin.io examples)

No prior HTTP knowledge is required - we'll build from the ground up!

## HTTP RFCs Reference

This course is based on the latest HTTP specifications:

- **[RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html)** - HTTP Semantics (June 2022) - Core HTTP specification
- **[RFC 9111](https://www.rfc-editor.org/rfc/rfc9111.html)** - HTTP Caching (June 2022)
- **[RFC 9112](https://www.rfc-editor.org/rfc/rfc9112.html)** - HTTP/1.1 (June 2022)
- **[RFC 9113](https://www.rfc-editor.org/rfc/rfc9113.html)** - HTTP/2 (June 2022)
- **[RFC 9114](https://www.rfc-editor.org/rfc/rfc9114.html)** - HTTP/3 (June 2022)

These RFCs replace the older RFC 7230-7237 series. Each chapter includes specific RFC section references for deeper study.

## Let's Get Started

Ready to dive in? Start with [Chapter 1: HTTP Basics](chapters/01-http-basics.qmd) to learn the fundamentals of the HTTP protocol.

## About httpbin.io

Throughout this course, we use [httpbin.io](https://httpbin.io), a free HTTP request & response service. It's perfect for testing and learning because it:

- Returns exactly what you send
- Supports all HTTP methods
- Provides endpoints for testing various scenarios
- Returns responses in JSON format

Let's test it with a simple echo request:

```{hurl}
#| echo: true
#| output: true

GET https://httpbin.io/get?course=http-fundamentals&level=beginner
```

Notice how httpbin.io returns all the details of your request, including query parameters, headers, and origin IP. This makes it an excellent learning tool!

---

Ready to begin? Click on **Chapter 1: HTTP Basics** in the sidebar to start your journey into HTTP fundamentals!
