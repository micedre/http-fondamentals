[
  {
    "objectID": "chapters/04-status-codes.html",
    "href": "chapters/04-status-codes.html",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "HTTP status codes are three-digit numbers that indicate the result of an HTTP request. They’re divided into five classes based on the first digit.\n\n\n\n\n\nClass\nRange\nMeaning\n\n\n\n\n1xx\n100-199\nInformational - Request received, continuing\n\n\n2xx\n200-299\nSuccess - Request successfully processed\n\n\n3xx\n300-399\nRedirection - Further action needed\n\n\n4xx\n400-499\nClient Error - Request contains errors\n\n\n5xx\n500-599\nServer Error - Server failed to fulfill request\n\n\n\n\n\n\n\n\ngraph TD\n    A[HTTP Status Code] --&gt; B[1xx Informational]\n    A --&gt; C[2xx Success]\n    A --&gt; D[3xx Redirection]\n    A --&gt; E[4xx Client Error]\n    A --&gt; F[5xx Server Error]\n\n    B --&gt; B1[100 Continue&lt;br/&gt;101 Switching Protocols]\n    C --&gt; C1[200 OK&lt;br/&gt;201 Created&lt;br/&gt;204 No Content]\n    D --&gt; D1[301 Moved Permanently&lt;br/&gt;302 Found&lt;br/&gt;304 Not Modified]\n    E --&gt; E1[400 Bad Request&lt;br/&gt;401 Unauthorized&lt;br/&gt;404 Not Found]\n    F --&gt; F1[500 Internal Server Error&lt;br/&gt;502 Bad Gateway&lt;br/&gt;503 Service Unavailable]\n\n    style B fill:#e3f2fd\n    style C fill:#c8e6c9\n    style D fill:#fff9c4\n    style E fill:#ffccbc\n    style F fill:#f8bbd0\n\n\n\n\n\n\n1xx Informational\nThese codes indicate that the request was received and is being processed.\n\n\nTells the client to continue sending the request body: httpbin.io returns 200, but 100 would be used for large uploads\n\n\n\n\nPOST https://httpbin.io/post\nExpect: 100-continue\nContent-Type: application/json\n\n{\n  \"data\": \"large payload\"\n}\n\n\n\nUsed when upgrading to WebSocket or HTTP/2:\n\n\n\nGET https://httpbin.io/get\n2xx Success\nThese codes indicate the request was successfully received, understood, and accepted.\n\n\n\nStandard success response:\n\n\n\nGET https://httpbin.io/status/200\n\n\n\nResource successfully created:\n\n\n\nPOST https://httpbin.io/status/201\nContent-Type: application/json\n\n{\n  \"name\": \"New Resource\",\n  \"type\": \"example\"\n}\nTypically includes a Location header pointing to the new resource.\n\n\n\nRequest accepted but not yet processed (async operations):\n\n\n\nPOST https://httpbin.io/status/202\nContent-Type: application/json\n\n{\n  \"job\": \"long-running-task\"\n}\n\n\n\nSuccess with no response body:\n\n\n\nDELETE https://httpbin.io/status/204\nUseful for DELETE operations or updates where no data needs to be returned.\n\n\n\nReturns partial content (range requests):\n\n%%verbose\n%%output=partial.bin\n\nGET https://httpbin.io/bytes/1000\nRange: bytes=0-499\n\n\n\nThese codes indicate that further action is needed to complete the request.\n\n\n\nResource permanently moved to a new URL:\n\n\n\nGET https://httpbin.io/status/301\n\n\n\nTemporary redirect:\n\n\n\nGET https://httpbin.io/status/302\n\n\n\nRedirect after POST to prevent duplicate submissions:\n\n\n\nGET https://httpbin.io/status/303\n\n\n\nResource hasn’t changed (used with conditional requests):\n\n\n\nGET https://httpbin.io/status/304\n\n\n\nSimilar to 302, but guarantees the method won’t change:\n\n\n\nGET https://httpbin.io/status/307\n\n\n\nSimilar to 301, but guarantees the method won’t change:\n\n\n\nGET https://httpbin.io/status/308\n\n\n\n301/302: May change POST to GET on redirect\n\nPOST https://httpbin.io/status/301\nContent-Type: application/json\n\n{\"test\": \"data\"}\n307/308: Preserve method and body on redirect\n\n\n\nPOST https://httpbin.io/status/307\nContent-Type: application/json\n\n{\"test\": \"data\"}\n\n\n\nThese codes indicate the client made an error in the request.\n\n\n\nMalformed request syntax:\n\n\n\nGET https://httpbin.io/status/400\n\n\n\nAuthentication required or failed:\n\n\n\nGET https://httpbin.io/status/401\nDespite the name, this means “unauthenticated” - you need to provide credentials.\n\n\n\nAuthenticated but not authorized:\n\n\n\nGET https://httpbin.io/status/403\nThe server understood the request but refuses to fulfill it.\n\n\n\n401: “Who are you?” - Need to login\n\n\n\n\nGET https://httpbin.io/status/401\n403: “I know who you are, but you can’t do that”\n\nGET https://httpbin.io/status/403\n\n\n\nResource doesn’t exist:\n\n\n\nGET https://httpbin.io/status/404\n\n\n\nHTTP method not supported for this resource:\n\n\n\nGET https://httpbin.io/status/405\nShould include an Allow header listing valid methods.\n\n\n\nServer can’t produce content matching the Accept headers:\n\n\n\nGET https://httpbin.io/status/406\n\n\n\nClient didn’t send request within server’s timeout:\n\n\n\nGET https://httpbin.io/status/408\n\n\n\nRequest conflicts with current state (e.g., duplicate resource):\n\n\n\nPOST https://httpbin.io/status/409\nContent-Type: application/json\n\n{\n  \"username\": \"already-taken\"\n}\n\n\n\nResource permanently deleted:\n\n\n\nGET https://httpbin.io/status/410\n\n\n\nContent-Length header required:\n\n\n\nGET https://httpbin.io/status/411\n\n\n\nConditional headers failed (e.g., If-Match):\n\n\n\nGET https://httpbin.io/status/412\n\n\n\nRequest body exceeds server limits:\n\n\n\nGET https://httpbin.io/status/413\n\n\n\nURL exceeds server limits:\n\n\n\nGET https://httpbin.io/status/414\n\n\n\nContent-Type not supported:\n\n\n\nPOST https://httpbin.io/status/415\nContent-Type: application/unsupported\n\n\"unsupported data\"\n\n\n\nRequested range is invalid:\n\n\n\nGET https://httpbin.io/status/416\n\n\n\nSyntax correct but semantically invalid:\n\n\n\nPOST https://httpbin.io/status/422\nContent-Type: application/json\n\n{\n  \"age\": -5,\n  \"email\": \"invalid-email\"\n}\n\n\n\nRate limit exceeded:\n\n\n\nGET https://httpbin.io/status/429\nShould include Retry-After header.\n\n\n\nHeaders exceed server limits:\n\n\n\nGET https://httpbin.io/status/431\n5xx Server Errors\nThese codes indicate the server encountered an error.\n\n\n\nGeneric server error:\n\n\n\nGET https://httpbin.io/status/500\n\n\n\nServer doesn’t support the requested functionality:\n\n\n\nGET https://httpbin.io/status/501\n\n\n\nGateway/proxy received invalid response from upstream:\n\n\n\nGET https://httpbin.io/status/502\n\n\n\nServer temporarily unavailable (maintenance, overload):\n\n\n\nGET https://httpbin.io/status/503\nShould include Retry-After header.\n\n\n\nGateway/proxy didn’t receive timely response:\n\n\n\nGET https://httpbin.io/status/504\n\n\n\nHTTP version not supported by server:\n\n\n\nGET https://httpbin.io/status/505\n\n\n\n\nhttpbin.io allows testing any status code:\n\n\n\n\nGET https://httpbin.io/status/418\n\n\n\n\nGET https://httpbin.io/status/451\n\n\n\n\n\n\n200: Generic success (GET, PUT, PATCH with body)\n201: Resource created (POST)\n202: Accepted for processing (async operations)\n204: Success with no content (DELETE, PUT/PATCH without body)\n\n\n\n\n400: Invalid request format\n401: Need authentication\n403: Authenticated but not authorized\n404: Resource not found\n409: Conflict (duplicate, version mismatch)\n422: Validation failed\n429: Rate limited\n\n\n\n\n\n500: Internal error\n502: Bad gateway\n503: Temporarily unavailable\n504: Gateway timeout\n\n\n\n\n\n\nYou can combine status codes with response bodies:\n200 with JSON body\n\n\n\n\nGET https://httpbin.io/json\n\n\n\n\nGET https://httpbin.io/status/400\n\n\n\n\nUse appropriate codes: Choose the most specific status code\nBe consistent: Use the same codes for similar situations\nInclude details: Provide error details in response body\nDocument codes: List possible status codes in API docs\nDon’t misuse codes: Don’t return 200 for errors\nHandle redirects: Follow 3xx redirects appropriately\nRetry logic: Implement retry for 429, 503, 504\n\n\n\n\n\n\nGET https://httpbin.io/status/404\n\n\nGET https://httpbin.io/status/401\nGET https://httpbin.io/status/403\n\n\n\n\n\nWhile httpbin.io responses vary, here’s a good error format:\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid email format\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"issue\": \"Must be valid email address\"\n      }\n    ]\n  }\n}\n\n\n\n\n\n\n\n\nflowchart TD\n    A[Request Received] --&gt; B{Successful?}\n\n    B --&gt;|Yes| C{What happened?}\n    C --&gt;|Returning data| D[200 OK]\n    C --&gt;|Created resource| E[201 Created]\n    C --&gt;|Accepted for later| F[202 Accepted]\n    C --&gt;|Success but no content| G[204 No Content]\n\n    B --&gt;|No| H{Whose fault?}\n\n    H --&gt;|Client Error| I{What's wrong?}\n    I --&gt;|Bad syntax| J[400 Bad Request]\n    I --&gt;|Not authenticated| K[401 Unauthorized]\n    I --&gt;|Not authorized| L[403 Forbidden]\n    I --&gt;|Not found| M[404 Not Found]\n    I --&gt;|Wrong method| N[405 Method Not Allowed]\n    I --&gt;|Validation failed| O[422 Unprocessable Entity]\n    I --&gt;|Rate limited| P[429 Too Many Requests]\n\n    H --&gt;|Server Error| Q{What happened?}\n    Q --&gt;|Generic error| R[500 Internal Server Error]\n    Q --&gt;|Not implemented| S[501 Not Implemented]\n    Q --&gt;|Gateway error| T[502 Bad Gateway]\n    Q --&gt;|Temporarily down| U[503 Service Unavailable]\n    Q --&gt;|Gateway timeout| V[504 Gateway Timeout]\n\n    style D fill:#c8e6c9\n    style E fill:#c8e6c9\n    style F fill:#c8e6c9\n    style G fill:#c8e6c9\n    style J fill:#ffccbc\n    style K fill:#ffccbc\n    style L fill:#ffccbc\n    style M fill:#ffccbc\n    style N fill:#ffccbc\n    style O fill:#ffccbc\n    style P fill:#ffccbc\n    style R fill:#f8bbd0\n    style S fill:#f8bbd0\n    style T fill:#f8bbd0\n    style U fill:#f8bbd0\n    style V fill:#f8bbd0\n\n\n\n\n\n\nTry these on your own:\n\nRequest different status codes and observe the responses\nSend a conditional request and get a 304 response\nTest rate limiting scenarios with 429\nCompare 301 vs 307 redirect behavior\nUnderstand when to use 401 vs 403\n\n\n1xx: Informational (rare in typical usage)\n2xx: Success (200, 201, 204 most common)\n3xx: Redirection (301, 302, 304 most common)\n4xx: Client error (400, 401, 403, 404, 422, 429 most common)\n5xx: Server error (500, 502, 503, 504 most common)\nUse specific codes rather than generic ones\nInclude helpful error messages in response bodies\nDocument expected status codes in API documentation\n\nNow that you understand status codes, let’s explore request and response bodies in detail in Chapter 5: Request & Response.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Status Codes\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 15: Status Codes\nSection 15.1: Overview of Status Codes\nSection 15.2: Informational 1xx\n\n15.2.1: 100 Continue\n15.2.2: 101 Switching Protocols\n\nSection 15.3: Successful 2xx\n\n15.3.1: 200 OK\n15.3.2: 201 Created\n15.3.3: 202 Accepted\n15.3.5: 204 No Content\n\nSection 15.4: Redirection 3xx\n\n15.4.2: 301 Moved Permanently\n15.4.3: 302 Found\n15.4.5: 304 Not Modified\n15.4.8: 307 Temporary Redirect\n15.4.9: 308 Permanent Redirect\n\nSection 15.5: Client Error 4xx\n\n15.5.1: 400 Bad Request\n15.5.2: 401 Unauthorized\n15.5.4: 403 Forbidden\n15.5.5: 404 Not Found\n15.5.6: 405 Method Not Allowed\n15.5.20: 429 Too Many Requests\n\nSection 15.6: Server Error 5xx\n\n15.6.1: 500 Internal Server Error\n15.6.2: 501 Not Implemented\n15.6.3: 502 Bad Gateway\n15.6.4: 503 Service Unavailable\n15.6.5: 504 Gateway Timeout",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#status-code-classes",
    "href": "chapters/04-status-codes.html#status-code-classes",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "Class\nRange\nMeaning\n\n\n\n\n1xx\n100-199\nInformational - Request received, continuing\n\n\n2xx\n200-299\nSuccess - Request successfully processed\n\n\n3xx\n300-399\nRedirection - Further action needed\n\n\n4xx\n400-499\nClient Error - Request contains errors\n\n\n5xx\n500-599\nServer Error - Server failed to fulfill request\n\n\n\n\n\n\n\n\ngraph TD\n    A[HTTP Status Code] --&gt; B[1xx Informational]\n    A --&gt; C[2xx Success]\n    A --&gt; D[3xx Redirection]\n    A --&gt; E[4xx Client Error]\n    A --&gt; F[5xx Server Error]\n\n    B --&gt; B1[100 Continue&lt;br/&gt;101 Switching Protocols]\n    C --&gt; C1[200 OK&lt;br/&gt;201 Created&lt;br/&gt;204 No Content]\n    D --&gt; D1[301 Moved Permanently&lt;br/&gt;302 Found&lt;br/&gt;304 Not Modified]\n    E --&gt; E1[400 Bad Request&lt;br/&gt;401 Unauthorized&lt;br/&gt;404 Not Found]\n    F --&gt; F1[500 Internal Server Error&lt;br/&gt;502 Bad Gateway&lt;br/&gt;503 Service Unavailable]\n\n    style B fill:#e3f2fd\n    style C fill:#c8e6c9\n    style D fill:#fff9c4\n    style E fill:#ffccbc\n    style F fill:#f8bbd0\n\n\n\n\n\n\n1xx Informational\nThese codes indicate that the request was received and is being processed.\n\n\nTells the client to continue sending the request body: httpbin.io returns 200, but 100 would be used for large uploads\n\n\n\n\nPOST https://httpbin.io/post\nExpect: 100-continue\nContent-Type: application/json\n\n{\n  \"data\": \"large payload\"\n}\n\n\n\nUsed when upgrading to WebSocket or HTTP/2:\n\n\n\nGET https://httpbin.io/get\n2xx Success\nThese codes indicate the request was successfully received, understood, and accepted.\n\n\n\nStandard success response:\n\n\n\nGET https://httpbin.io/status/200\n\n\n\nResource successfully created:\n\n\n\nPOST https://httpbin.io/status/201\nContent-Type: application/json\n\n{\n  \"name\": \"New Resource\",\n  \"type\": \"example\"\n}\nTypically includes a Location header pointing to the new resource.\n\n\n\nRequest accepted but not yet processed (async operations):\n\n\n\nPOST https://httpbin.io/status/202\nContent-Type: application/json\n\n{\n  \"job\": \"long-running-task\"\n}\n\n\n\nSuccess with no response body:\n\n\n\nDELETE https://httpbin.io/status/204\nUseful for DELETE operations or updates where no data needs to be returned.\n\n\n\nReturns partial content (range requests):\n\n%%verbose\n%%output=partial.bin\n\nGET https://httpbin.io/bytes/1000\nRange: bytes=0-499\n\n\n\nThese codes indicate that further action is needed to complete the request.\n\n\n\nResource permanently moved to a new URL:\n\n\n\nGET https://httpbin.io/status/301\n\n\n\nTemporary redirect:\n\n\n\nGET https://httpbin.io/status/302\n\n\n\nRedirect after POST to prevent duplicate submissions:\n\n\n\nGET https://httpbin.io/status/303\n\n\n\nResource hasn’t changed (used with conditional requests):\n\n\n\nGET https://httpbin.io/status/304\n\n\n\nSimilar to 302, but guarantees the method won’t change:\n\n\n\nGET https://httpbin.io/status/307\n\n\n\nSimilar to 301, but guarantees the method won’t change:\n\n\n\nGET https://httpbin.io/status/308\n\n\n\n301/302: May change POST to GET on redirect\n\nPOST https://httpbin.io/status/301\nContent-Type: application/json\n\n{\"test\": \"data\"}\n307/308: Preserve method and body on redirect\n\n\n\nPOST https://httpbin.io/status/307\nContent-Type: application/json\n\n{\"test\": \"data\"}\n\n\n\nThese codes indicate the client made an error in the request.\n\n\n\nMalformed request syntax:\n\n\n\nGET https://httpbin.io/status/400\n\n\n\nAuthentication required or failed:\n\n\n\nGET https://httpbin.io/status/401\nDespite the name, this means “unauthenticated” - you need to provide credentials.\n\n\n\nAuthenticated but not authorized:\n\n\n\nGET https://httpbin.io/status/403\nThe server understood the request but refuses to fulfill it.\n\n\n\n401: “Who are you?” - Need to login\n\n\n\n\nGET https://httpbin.io/status/401\n403: “I know who you are, but you can’t do that”\n\nGET https://httpbin.io/status/403\n\n\n\nResource doesn’t exist:\n\n\n\nGET https://httpbin.io/status/404\n\n\n\nHTTP method not supported for this resource:\n\n\n\nGET https://httpbin.io/status/405\nShould include an Allow header listing valid methods.\n\n\n\nServer can’t produce content matching the Accept headers:\n\n\n\nGET https://httpbin.io/status/406\n\n\n\nClient didn’t send request within server’s timeout:\n\n\n\nGET https://httpbin.io/status/408\n\n\n\nRequest conflicts with current state (e.g., duplicate resource):\n\n\n\nPOST https://httpbin.io/status/409\nContent-Type: application/json\n\n{\n  \"username\": \"already-taken\"\n}\n\n\n\nResource permanently deleted:\n\n\n\nGET https://httpbin.io/status/410\n\n\n\nContent-Length header required:\n\n\n\nGET https://httpbin.io/status/411\n\n\n\nConditional headers failed (e.g., If-Match):\n\n\n\nGET https://httpbin.io/status/412\n\n\n\nRequest body exceeds server limits:\n\n\n\nGET https://httpbin.io/status/413\n\n\n\nURL exceeds server limits:\n\n\n\nGET https://httpbin.io/status/414\n\n\n\nContent-Type not supported:\n\n\n\nPOST https://httpbin.io/status/415\nContent-Type: application/unsupported\n\n\"unsupported data\"\n\n\n\nRequested range is invalid:\n\n\n\nGET https://httpbin.io/status/416\n\n\n\nSyntax correct but semantically invalid:\n\n\n\nPOST https://httpbin.io/status/422\nContent-Type: application/json\n\n{\n  \"age\": -5,\n  \"email\": \"invalid-email\"\n}\n\n\n\nRate limit exceeded:\n\n\n\nGET https://httpbin.io/status/429\nShould include Retry-After header.\n\n\n\nHeaders exceed server limits:\n\n\n\nGET https://httpbin.io/status/431\n5xx Server Errors\nThese codes indicate the server encountered an error.\n\n\n\nGeneric server error:\n\n\n\nGET https://httpbin.io/status/500\n\n\n\nServer doesn’t support the requested functionality:\n\n\n\nGET https://httpbin.io/status/501\n\n\n\nGateway/proxy received invalid response from upstream:\n\n\n\nGET https://httpbin.io/status/502\n\n\n\nServer temporarily unavailable (maintenance, overload):\n\n\n\nGET https://httpbin.io/status/503\nShould include Retry-After header.\n\n\n\nGateway/proxy didn’t receive timely response:\n\n\n\nGET https://httpbin.io/status/504\n\n\n\nHTTP version not supported by server:\n\n\n\nGET https://httpbin.io/status/505",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#testing-any-status-code",
    "href": "chapters/04-status-codes.html#testing-any-status-code",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "httpbin.io allows testing any status code:\n\n\n\n\nGET https://httpbin.io/status/418\n\n\n\n\nGET https://httpbin.io/status/451\n\n\n\n\n\n\n200: Generic success (GET, PUT, PATCH with body)\n201: Resource created (POST)\n202: Accepted for processing (async operations)\n204: Success with no content (DELETE, PUT/PATCH without body)\n\n\n\n\n400: Invalid request format\n401: Need authentication\n403: Authenticated but not authorized\n404: Resource not found\n409: Conflict (duplicate, version mismatch)\n422: Validation failed\n429: Rate limited\n\n\n\n\n\n500: Internal error\n502: Bad gateway\n503: Temporarily unavailable\n504: Gateway timeout",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#status-codes-with-response-bodies",
    "href": "chapters/04-status-codes.html#status-codes-with-response-bodies",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "You can combine status codes with response bodies:\n200 with JSON body\n\n\n\n\nGET https://httpbin.io/json\n\n\n\n\nGET https://httpbin.io/status/400",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#best-practices",
    "href": "chapters/04-status-codes.html#best-practices",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "Use appropriate codes: Choose the most specific status code\nBe consistent: Use the same codes for similar situations\nInclude details: Provide error details in response body\nDocument codes: List possible status codes in API docs\nDon’t misuse codes: Don’t return 200 for errors\nHandle redirects: Follow 3xx redirects appropriately\nRetry logic: Implement retry for 429, 503, 504\n\n\n\n\n\n\nGET https://httpbin.io/status/404\n\n\nGET https://httpbin.io/status/401\nGET https://httpbin.io/status/403",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#error-response-format",
    "href": "chapters/04-status-codes.html#error-response-format",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "While httpbin.io responses vary, here’s a good error format:\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid email format\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"issue\": \"Must be valid email address\"\n      }\n    ]\n  }\n}",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#decision-tree",
    "href": "chapters/04-status-codes.html#decision-tree",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "flowchart TD\n    A[Request Received] --&gt; B{Successful?}\n\n    B --&gt;|Yes| C{What happened?}\n    C --&gt;|Returning data| D[200 OK]\n    C --&gt;|Created resource| E[201 Created]\n    C --&gt;|Accepted for later| F[202 Accepted]\n    C --&gt;|Success but no content| G[204 No Content]\n\n    B --&gt;|No| H{Whose fault?}\n\n    H --&gt;|Client Error| I{What's wrong?}\n    I --&gt;|Bad syntax| J[400 Bad Request]\n    I --&gt;|Not authenticated| K[401 Unauthorized]\n    I --&gt;|Not authorized| L[403 Forbidden]\n    I --&gt;|Not found| M[404 Not Found]\n    I --&gt;|Wrong method| N[405 Method Not Allowed]\n    I --&gt;|Validation failed| O[422 Unprocessable Entity]\n    I --&gt;|Rate limited| P[429 Too Many Requests]\n\n    H --&gt;|Server Error| Q{What happened?}\n    Q --&gt;|Generic error| R[500 Internal Server Error]\n    Q --&gt;|Not implemented| S[501 Not Implemented]\n    Q --&gt;|Gateway error| T[502 Bad Gateway]\n    Q --&gt;|Temporarily down| U[503 Service Unavailable]\n    Q --&gt;|Gateway timeout| V[504 Gateway Timeout]\n\n    style D fill:#c8e6c9\n    style E fill:#c8e6c9\n    style F fill:#c8e6c9\n    style G fill:#c8e6c9\n    style J fill:#ffccbc\n    style K fill:#ffccbc\n    style L fill:#ffccbc\n    style M fill:#ffccbc\n    style N fill:#ffccbc\n    style O fill:#ffccbc\n    style P fill:#ffccbc\n    style R fill:#f8bbd0\n    style S fill:#f8bbd0\n    style T fill:#f8bbd0\n    style U fill:#f8bbd0\n    style V fill:#f8bbd0\n\n\n\n\n\n\nTry these on your own:\n\nRequest different status codes and observe the responses\nSend a conditional request and get a 304 response\nTest rate limiting scenarios with 429\nCompare 301 vs 307 redirect behavior\nUnderstand when to use 401 vs 403\n\n\n1xx: Informational (rare in typical usage)\n2xx: Success (200, 201, 204 most common)\n3xx: Redirection (301, 302, 304 most common)\n4xx: Client error (400, 401, 403, 404, 422, 429 most common)\n5xx: Server error (500, 502, 503, 504 most common)\nUse specific codes rather than generic ones\nInclude helpful error messages in response bodies\nDocument expected status codes in API documentation\n\nNow that you understand status codes, let’s explore request and response bodies in detail in Chapter 5: Request & Response.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/04-status-codes.html#rfc-references",
    "href": "chapters/04-status-codes.html#rfc-references",
    "title": "Chapter 4: HTTP Status Codes",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Status Codes\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 15: Status Codes\nSection 15.1: Overview of Status Codes\nSection 15.2: Informational 1xx\n\n15.2.1: 100 Continue\n15.2.2: 101 Switching Protocols\n\nSection 15.3: Successful 2xx\n\n15.3.1: 200 OK\n15.3.2: 201 Created\n15.3.3: 202 Accepted\n15.3.5: 204 No Content\n\nSection 15.4: Redirection 3xx\n\n15.4.2: 301 Moved Permanently\n15.4.3: 302 Found\n15.4.5: 304 Not Modified\n15.4.8: 307 Temporary Redirect\n15.4.9: 308 Permanent Redirect\n\nSection 15.5: Client Error 4xx\n\n15.5.1: 400 Bad Request\n15.5.2: 401 Unauthorized\n15.5.4: 403 Forbidden\n15.5.5: 404 Not Found\n15.5.6: 405 Method Not Allowed\n15.5.20: 429 Too Many Requests\n\nSection 15.6: Server Error 5xx\n\n15.6.1: 500 Internal Server Error\n15.6.2: 501 Not Implemented\n15.6.3: 502 Bad Gateway\n15.6.4: 503 Service Unavailable\n15.6.5: 504 Gateway Timeout",
    "crumbs": [
      "Home",
      "Core Concepts",
      "4. Status Codes"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html",
    "href": "chapters/01-http-basics.html",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP (Hypertext Transfer Protocol) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes.\n\n\nHTTP is:\n\nStateless: Each request is independent; the server doesn’t retain information between requests\nText-based: HTTP messages are human-readable (though the body can be binary)\nClient-Server: Follows a request-response pattern\nApplication Layer: Operates at Layer 7 of the OSI model\n\n\n\n\nEvery HTTP interaction follows this pattern:\n\nClient sends a request to the server\nServer processes the request\nServer sends a response back to the client\n\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n    Client-&gt;&gt;Server: HTTP Request\n    Note over Server: Process request\n    Server-&gt;&gt;Client: HTTP Response\n\n\n\n\n\n\nLet’s see this in action:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\n\n\n\nA URL (Uniform Resource Locator) identifies the location of a resource. Let’s break down its components:\nhttps://httpbin.io:443/get?name=value#section\n└─┬─┘  └────┬────┘ └┬┘ └┬┘ └────┬────┘ └──┬──┘\n  │         │        │   │       │          │\nscheme   hostname  port path   query    fragment\n\n\n\n\n\ngraph LR\n    A[Complete URL] --&gt; B[Scheme: https]\n    A --&gt; C[Hostname: httpbin.io]\n    A --&gt; D[Port: 443]\n    A --&gt; E[Path: /get]\n    A --&gt; F[Query: ?name=value]\n    A --&gt; G[Fragment: #section]\n\n    style A fill:#e1f5ff\n    style B fill:#fff4e1\n    style C fill:#fff4e1\n    style D fill:#fff4e1\n    style E fill:#fff4e1\n    style F fill:#fff4e1\n    style G fill:#fff4e1\n\n\n\n\n\n\n\nScheme: Protocol to use (http, https)\nHostname: Domain name or IP address\nPort: Optional (default: 80 for HTTP, 443 for HTTPS)\nPath: Resource location on the server\nQuery: Optional parameters as key-value pairs\nFragment: Optional reference to a specific part (not sent to server)\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?name=Alice&age=30&city=Paris\nNotice in the response how the query parameters are parsed into the args object.\n\n\n\n\nHTTP has evolved over time:\n\nHTTP/0.9 (1991): Single-line protocol, only GET method\nHTTP/1.0 (1996): Added headers, status codes, and more methods\nHTTP/1.1 (1997): Persistent connections, chunked transfers, host header\nHTTP/2 (2015): Binary protocol, multiplexing, server push\nHTTP/3 (2022): Based on QUIC, improved performance over UDP\n\nMost modern applications use HTTP/1.1 or HTTP/2, with HTTP/3 gaining adoption.\n\n\n\nAn HTTP request consists of:\n\nRequest Line: Method, URL path, and HTTP version\nHeaders: Metadata about the request\nEmpty Line: Separates headers from body\nBody: Optional data payload\n\nExample structure:\nGET /users/123 HTTP/1.1\nHost: api.example.com\nUser-Agent: MyClient/1.0\nAccept: application/json\n\nLet’s examine a real request:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nUser-Agent: HTTP-Training-Client/1.0\nAccept: application/json\n\n\n\nAn HTTP response consists of:\n\nStatus Line: HTTP version, status code, and reason phrase\nHeaders: Metadata about the response\nEmpty Line: Separates headers from body\nBody: The actual content/data\n\nExample structure:\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 123\n\n{\"message\": \"Success\"}\n\n\n\n\nHTTP: Unencrypted communication (port 80)\nHTTPS: Encrypted with SSL/TLS (port 443)\n\nHTTPS provides: - Confidentiality: Data is encrypted - Integrity: Data cannot be modified in transit - Authentication: Verifies the server’s identity\nLet’s verify we’re using HTTPS:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nIn the response, check the url field - it shows https://, confirming the secure connection.\n\n\n\nBefore HTTP communication can begin, a TCP connection must be established:\n\nDNS Resolution: Convert hostname to IP address\nTCP Handshake: Three-way handshake to establish connection\nTLS Handshake: (for HTTPS) Establish encrypted channel\nHTTP Request/Response: Exchange messages\nConnection Close: (or kept alive for subsequent requests)\n\n\n\n\n\n\nsequenceDiagram\n    participant C as Client\n    participant S as Server\n    participant DNS as DNS Server\n\n    C-&gt;&gt;DNS: DNS Query: httpbin.io\n    DNS-&gt;&gt;C: IP Address: 54.166.163.67\n\n    Note over C,S: TCP 3-Way Handshake\n    C-&gt;&gt;S: SYN\n    S-&gt;&gt;C: SYN-ACK\n    C-&gt;&gt;S: ACK\n\n    Note over C,S: TLS Handshake (HTTPS)\n    C-&gt;&gt;S: ClientHello\n    S-&gt;&gt;C: ServerHello + Certificate\n    C-&gt;&gt;S: Key Exchange\n    S-&gt;&gt;C: Finished\n\n    Note over C,S: HTTP Exchange\n    C-&gt;&gt;S: HTTP Request\n    S-&gt;&gt;C: HTTP Response\n\n    Note over C,S: Connection Close or Keep-Alive\n\n\n\n\n\n\n\n\n\nHTTP itself doesn’t remember previous requests. Each request is independent:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nX-Request-ID: request-1\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nX-Request-ID: request-2\nNotice each response is independent - the server doesn’t “remember” the first request. Statefulness is typically added through:\n\nCookies\nSession tokens\nJWT tokens\nURL parameters\n\n\n\n\n\n\ngraph TD\n    A[HTTP is Stateless] --&gt; B[Each request is independent]\n    B --&gt; C[Server doesn't remember previous requests]\n\n    D[Adding State] --&gt; E[Cookies]\n    D --&gt; F[Session Tokens]\n    D --&gt; G[JWT Tokens]\n    D --&gt; H[URL Parameters]\n\n    E --&gt; I[Client stores, sends with each request]\n    F --&gt; I\n    G --&gt; I\n    H --&gt; I\n\n    style A fill:#ffcccc\n    style D fill:#ccffcc\n\n\n\n\n\n\n\n\n\nLet’s verify basic connectivity and inspect what data is sent:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/anything\nThe /anything endpoint returns everything about your request, which is great for debugging.\n\n\n\n\nHTTP is a stateless, text-based protocol for client-server communication\nURLs contain the scheme, hostname, path, and optional query parameters\nRequests have a method, path, headers, and optional body\nResponses have a status code, headers, and optional body\nHTTPS adds encryption via SSL/TLS\nEach request is independent unless state is explicitly maintained\n\n\n\n\nTry these on your own:\n\nMake a request to https://httpbin.io/user-agent and observe what’s returned\nMake a request with multiple query parameters\nAdd a custom header to your request and verify it appears in the response\n\n\n\n\nNow that you understand HTTP basics, let’s explore the different HTTP methods in Chapter 2: HTTP Methods.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteCore HTTP Specifications\n\n\n\n\nRFC 9110 - HTTP Semantics (replaces RFC 7230-7235)\n\nSection 2: Conformance\nSection 3: Terminology and Core Concepts\nSection 6: Message Abstraction\n\nRFC 9112 - HTTP/1.1\n\nSection 2: Message Format\n\nRFC 3986 - URI Generic Syntax\n\nSection 3: Syntax Components",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#what-is-http",
    "href": "chapters/01-http-basics.html#what-is-http",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP is:\n\nStateless: Each request is independent; the server doesn’t retain information between requests\nText-based: HTTP messages are human-readable (though the body can be binary)\nClient-Server: Follows a request-response pattern\nApplication Layer: Operates at Layer 7 of the OSI model",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#the-http-request-response-cycle",
    "href": "chapters/01-http-basics.html#the-http-request-response-cycle",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "Every HTTP interaction follows this pattern:\n\nClient sends a request to the server\nServer processes the request\nServer sends a response back to the client\n\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n    Client-&gt;&gt;Server: HTTP Request\n    Note over Server: Process request\n    Server-&gt;&gt;Client: HTTP Response\n\n\n\n\n\n\nLet’s see this in action:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#anatomy-of-a-url",
    "href": "chapters/01-http-basics.html#anatomy-of-a-url",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "A URL (Uniform Resource Locator) identifies the location of a resource. Let’s break down its components:\nhttps://httpbin.io:443/get?name=value#section\n└─┬─┘  └────┬────┘ └┬┘ └┬┘ └────┬────┘ └──┬──┘\n  │         │        │   │       │          │\nscheme   hostname  port path   query    fragment\n\n\n\n\n\ngraph LR\n    A[Complete URL] --&gt; B[Scheme: https]\n    A --&gt; C[Hostname: httpbin.io]\n    A --&gt; D[Port: 443]\n    A --&gt; E[Path: /get]\n    A --&gt; F[Query: ?name=value]\n    A --&gt; G[Fragment: #section]\n\n    style A fill:#e1f5ff\n    style B fill:#fff4e1\n    style C fill:#fff4e1\n    style D fill:#fff4e1\n    style E fill:#fff4e1\n    style F fill:#fff4e1\n    style G fill:#fff4e1\n\n\n\n\n\n\n\nScheme: Protocol to use (http, https)\nHostname: Domain name or IP address\nPort: Optional (default: 80 for HTTP, 443 for HTTPS)\nPath: Resource location on the server\nQuery: Optional parameters as key-value pairs\nFragment: Optional reference to a specific part (not sent to server)\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?name=Alice&age=30&city=Paris\nNotice in the response how the query parameters are parsed into the args object.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#http-versions",
    "href": "chapters/01-http-basics.html#http-versions",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP has evolved over time:\n\nHTTP/0.9 (1991): Single-line protocol, only GET method\nHTTP/1.0 (1996): Added headers, status codes, and more methods\nHTTP/1.1 (1997): Persistent connections, chunked transfers, host header\nHTTP/2 (2015): Binary protocol, multiplexing, server push\nHTTP/3 (2022): Based on QUIC, improved performance over UDP\n\nMost modern applications use HTTP/1.1 or HTTP/2, with HTTP/3 gaining adoption.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#structure-of-an-http-request",
    "href": "chapters/01-http-basics.html#structure-of-an-http-request",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "An HTTP request consists of:\n\nRequest Line: Method, URL path, and HTTP version\nHeaders: Metadata about the request\nEmpty Line: Separates headers from body\nBody: Optional data payload\n\nExample structure:\nGET /users/123 HTTP/1.1\nHost: api.example.com\nUser-Agent: MyClient/1.0\nAccept: application/json\n\nLet’s examine a real request:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nUser-Agent: HTTP-Training-Client/1.0\nAccept: application/json",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#structure-of-an-http-response",
    "href": "chapters/01-http-basics.html#structure-of-an-http-response",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "An HTTP response consists of:\n\nStatus Line: HTTP version, status code, and reason phrase\nHeaders: Metadata about the response\nEmpty Line: Separates headers from body\nBody: The actual content/data\n\nExample structure:\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 123\n\n{\"message\": \"Success\"}",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#http-and-https",
    "href": "chapters/01-http-basics.html#http-and-https",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP: Unencrypted communication (port 80)\nHTTPS: Encrypted with SSL/TLS (port 443)\n\nHTTPS provides: - Confidentiality: Data is encrypted - Integrity: Data cannot be modified in transit - Authentication: Verifies the server’s identity\nLet’s verify we’re using HTTPS:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nIn the response, check the url field - it shows https://, confirming the secure connection.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#the-tcpip-connection",
    "href": "chapters/01-http-basics.html#the-tcpip-connection",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "Before HTTP communication can begin, a TCP connection must be established:\n\nDNS Resolution: Convert hostname to IP address\nTCP Handshake: Three-way handshake to establish connection\nTLS Handshake: (for HTTPS) Establish encrypted channel\nHTTP Request/Response: Exchange messages\nConnection Close: (or kept alive for subsequent requests)\n\n\n\n\n\n\nsequenceDiagram\n    participant C as Client\n    participant S as Server\n    participant DNS as DNS Server\n\n    C-&gt;&gt;DNS: DNS Query: httpbin.io\n    DNS-&gt;&gt;C: IP Address: 54.166.163.67\n\n    Note over C,S: TCP 3-Way Handshake\n    C-&gt;&gt;S: SYN\n    S-&gt;&gt;C: SYN-ACK\n    C-&gt;&gt;S: ACK\n\n    Note over C,S: TLS Handshake (HTTPS)\n    C-&gt;&gt;S: ClientHello\n    S-&gt;&gt;C: ServerHello + Certificate\n    C-&gt;&gt;S: Key Exchange\n    S-&gt;&gt;C: Finished\n\n    Note over C,S: HTTP Exchange\n    C-&gt;&gt;S: HTTP Request\n    S-&gt;&gt;C: HTTP Response\n\n    Note over C,S: Connection Close or Keep-Alive",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#http-is-stateless",
    "href": "chapters/01-http-basics.html#http-is-stateless",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP itself doesn’t remember previous requests. Each request is independent:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nX-Request-ID: request-1\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\nX-Request-ID: request-2\nNotice each response is independent - the server doesn’t “remember” the first request. Statefulness is typically added through:\n\nCookies\nSession tokens\nJWT tokens\nURL parameters\n\n\n\n\n\n\ngraph TD\n    A[HTTP is Stateless] --&gt; B[Each request is independent]\n    B --&gt; C[Server doesn't remember previous requests]\n\n    D[Adding State] --&gt; E[Cookies]\n    D --&gt; F[Session Tokens]\n    D --&gt; G[JWT Tokens]\n    D --&gt; H[URL Parameters]\n\n    E --&gt; I[Client stores, sends with each request]\n    F --&gt; I\n    G --&gt; I\n    H --&gt; I\n\n    style A fill:#ffcccc\n    style D fill:#ccffcc",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#testing-connectivity",
    "href": "chapters/01-http-basics.html#testing-connectivity",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "Let’s verify basic connectivity and inspect what data is sent:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/anything\nThe /anything endpoint returns everything about your request, which is great for debugging.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#key-takeaways",
    "href": "chapters/01-http-basics.html#key-takeaways",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "HTTP is a stateless, text-based protocol for client-server communication\nURLs contain the scheme, hostname, path, and optional query parameters\nRequests have a method, path, headers, and optional body\nResponses have a status code, headers, and optional body\nHTTPS adds encryption via SSL/TLS\nEach request is independent unless state is explicitly maintained",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#practice-exercises",
    "href": "chapters/01-http-basics.html#practice-exercises",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "Try these on your own:\n\nMake a request to https://httpbin.io/user-agent and observe what’s returned\nMake a request with multiple query parameters\nAdd a custom header to your request and verify it appears in the response",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#next-steps",
    "href": "chapters/01-http-basics.html#next-steps",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "Now that you understand HTTP basics, let’s explore the different HTTP methods in Chapter 2: HTTP Methods.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/01-http-basics.html#rfc-references",
    "href": "chapters/01-http-basics.html#rfc-references",
    "title": "Chapter 1: HTTP Basics",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteCore HTTP Specifications\n\n\n\n\nRFC 9110 - HTTP Semantics (replaces RFC 7230-7235)\n\nSection 2: Conformance\nSection 3: Terminology and Core Concepts\nSection 6: Message Abstraction\n\nRFC 9112 - HTTP/1.1\n\nSection 2: Message Format\n\nRFC 3986 - URI Generic Syntax\n\nSection 3: Syntax Components",
    "crumbs": [
      "Home",
      "Core Concepts",
      "1. HTTP Basics"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html",
    "href": "chapters/03-http-headers.html",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "HTTP headers allow clients and servers to pass additional information with requests and responses. They define the operating parameters of an HTTP transaction.\n\n\nHeaders are key-value pairs sent before the body:\nHeader-Name: value\nAnother-Header: another value\nRules: - Header names are case-insensitive (Content-Type = content-type) - Values are case-sensitive - Multiple values can be comma-separated - Custom headers traditionally start with X- (though this is deprecated)\n\n\n\n\n\ngraph TD\n    A[HTTP Headers] --&gt; B[Request Headers]\n    A --&gt; C[Response Headers]\n    A --&gt; D[General Headers]\n\n    B --&gt; E[Accept]\n    B --&gt; F[Authorization]\n    B --&gt; G[User-Agent]\n    B --&gt; H[Cookie]\n\n    C --&gt; I[Content-Type]\n    C --&gt; J[Set-Cookie]\n    C --&gt; K[Server]\n    C --&gt; L[ETag]\n\n    D --&gt; M[Cache-Control]\n    D --&gt; N[Connection]\n    D --&gt; O[Date]\n\n    style B fill:#bbdefb\n    style C fill:#c8e6c9\n    style D fill:#fff9c4\n\n\n\n\n\n\n\n\n\nRequest headers provide information about the client and the requested resource.\n\n\nHEAD https://httpbin.io/der\nThe Host header specifies the domain name of the server (required in HTTP/1.1):\n\n\n\nGET https://httpbin.io/headers\nHost: httpbin.io\n\n\n\nIdentifies the client making the request:\n\n\n\nGET https://httpbin.io/user-agent\nUser-Agent: Mozilla/5.0 (Training-Client) HTTP-Course/1.0\n\n\n\nTell the server what content types, encodings, and languages the client can handle:\n\n\n\nGET https://httpbin.io/headers\nAccept: application/json, text/html\nAccept-Language: en-US, fr-FR\nAccept-Encoding: gzip, deflate, br\n\n\n\n\n\n\nGET https://httpbin.io/headers\nAccept: application/json\n\n\n\n\nGET https://httpbin.io/headers\nAccept: application/xml, application/json;q=0.9\nThe q parameter indicates preference (0.0 to 1.0), with 1.0 being highest priority.\n\n\n\n\nIndicates the URL of the page that linked to the current request:\n\nGET https://httpbin.io/headers\nReferer: https://example.com/previous-page\n\n\n\n\nResponse headers provide information about the server and the response.\n\n\nSpecifies the media type of the response body:\n\n\n\nGET https://httpbin.io/json\nLook for Content-Type: application/json in the response headers.\n\n\n\nIndicates the size of the response body in bytes:\n#| output: false\n\n%%include\nGET https://httpbin.io/get\nThe response will include Content-Length: 100 (output disabled as this returns binary data).\n\n\n\nIdentifies the server software:\n\n\n\nGET https://httpbin.io/headers\nLook for the Server header in the response (e.g., Server: nginx).\n\n\n\n\nWhen sending data, specify its format:\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"message\": \"This is JSON data\"\n}\nPOST https://httpbin.io/post\nContent-Type: application/xml\n\n&lt;message&gt;This is XML data&lt;/message&gt;\nPOST https://httpbin.io/post\nContent-Type: text/plain\n\n\"This is plain text data\"\n\n\nRequest content in specific languages:\n\nGET https://httpbin.io/headers\nAccept-Language: fr-FR, en-US;q=0.8, en;q=0.6\nThis requests: 1. French (France) - highest priority 2. English (US) - medium priority (0.8) 3. Any English - lower priority (0.6)\n\n\n\n\nControls caching behavior:\nGET https://httpbin.io/cache\nCache-Control: no-cache\nCommon Cache-Control directives: - no-cache: Validate with server before using cache - no-store: Don’t cache at all - max-age=3600: Cache for 3600 seconds - public: Can be cached by any cache - private: Can only be cached by browser\n\n\n\n\n\nflowchart TD\n    A[Cache-Control Directives] --&gt; B[Request]\n    A --&gt; C[Response]\n\n    B --&gt; D[no-cache: Revalidate]\n    B --&gt; E[no-store: Don't cache]\n    B --&gt; F[max-age: Time limit]\n\n    C --&gt; G[public: Any cache]\n    C --&gt; H[private: Browser only]\n    C --&gt; I[no-store: Don't cache]\n    C --&gt; J[max-age: Fresh duration]\n    C --&gt; K[must-revalidate: Check when stale]\n\n    style B fill:#bbdefb\n    style C fill:#c8e6c9\n\n\n\n\n\n\n\n\nETags enable conditional requests:\n\nGET https://httpbin.io/etag/test-etag-123\nGET https://httpbin.io/etag/test-etag-123\nIf-None-Match: \"test-etag-123\"\nIf the resource hasn’t changed, the server returns 304 Not Modified.\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client-&gt;&gt;Server: GET /resource\n    Server-&gt;&gt;Client: 200 OK&lt;br/&gt;ETag: \"abc123\"&lt;br/&gt;[Full Content]\n\n    Note over Client: Client caches resource&lt;br/&gt;with ETag \"abc123\"\n\n    Client-&gt;&gt;Server: GET /resource&lt;br/&gt;If-None-Match: \"abc123\"\n\n    alt Resource Unchanged\n        Server-&gt;&gt;Client: 304 Not Modified&lt;br/&gt;(no body, saves bandwidth)\n    else Resource Changed\n        Server-&gt;&gt;Client: 200 OK&lt;br/&gt;ETag: \"xyz789\"&lt;br/&gt;[New Content]\n    end\n\n\n\n\n\n\n\n\n\nRequest resource only if modified after a certain date:\nGET https://httpbin.io/headers\nIf-Modified-Since: Wed, 21 Oct 2024 07:28:00 GMT\n\n\n\nProceed only if resource hasn’t been modified:\nPUT https://httpbin.io/put\nIf-Unmodified-Since: Wed, 21 Oct 2024 07:28:00 GMT\nContent-Type: application/json\n\n{\n  \"data\": \"update only if not modified\"\n}\nYou can add custom headers for application-specific purposes:\nGET https://httpbin.io/headers\nX-Request-ID: abc-123-def-456\nX-Client-Version: 2.5.1\nX-Debug-Mode: true\nX-User-Region: EU-West\n\n\n\n\nUse descriptive names\nModern convention: avoid X- prefix (though still widely used)\nDocument custom headers in API documentation\nKeep values simple and parseable\n\n\n\n\n\n\n\n%%include\nGET https://httpbin.io/cookies/set?session=abc123&user=alice\nThe server responds with Set-Cookie headers.\n\n\n\n%%include\nGET https://httpbin.io/cookies\nCookie: session=abc123; user=alice\n\n\n\n\nCross-Origin Resource Sharing (CORS) headers control cross-domain requests:\n%%include\nGET https://httpbin.io/get\nOrigin: https://example.com\nThe server may respond with: - Access-Control-Allow-Origin: Allowed origins - Access-Control-Allow-Methods: Allowed HTTP methods - Access-Control-Allow-Headers: Allowed headers - Access-Control-Max-Age: How long to cache preflight results\n\n\n\n\n\nsequenceDiagram\n    participant Browser\n    participant example.com\n    participant api.other.com\n\n    Browser-&gt;&gt;example.com: Load page\n    Note over Browser: JavaScript wants to&lt;br/&gt;call api.other.com\n\n    Browser-&gt;&gt;api.other.com: OPTIONS /api/data&lt;br/&gt;Origin: https://example.com&lt;br/&gt;Access-Control-Request-Method: POST\n\n    api.other.com-&gt;&gt;Browser: 200 OK&lt;br/&gt;Access-Control-Allow-Origin: *&lt;br/&gt;Access-Control-Allow-Methods: POST, GET\n\n    Browser-&gt;&gt;api.other.com: POST /api/data&lt;br/&gt;Origin: https://example.com\n\n    api.other.com-&gt;&gt;Browser: 200 OK&lt;br/&gt;Access-Control-Allow-Origin: *&lt;br/&gt;[Response Data]\n\n\n\n\n\n\n\n\n%%include\nOPTIONS https://httpbin.io/post\nOrigin: https://example.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type\nRequest partial content (useful for resuming downloads):\n%%verbose\n%%ouput=range1.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\nThis requests the first 500 bytes. The server responds with 206 Partial Content and includes: - Content-Range: Indicates which bytes are being returned - Accept-Ranges: Indicates support for range requests\n\n\n\n%%verbose\n%%ouput=range2.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-99, 200-299\n\n\n\n\n\n\nRequest compressed responses:\n%%include\nGET https://httpbin.io/gzip\nAccept-Encoding: gzip, deflate, br\n[Options]\ncompressed: true\nThe server may compress the response and include Content-Encoding: gzip.\n\n\n\nIndicates the response is compressed:\n%%include\nGET https://httpbin.io/gzip\n[Options]\ncompressed: true\nLook for Content-Encoding: gzip in the response.\n\n\n\n\n\n\nSend credentials with requests:\n%%include\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\nCommon schemes: - Basic: Base64-encoded username:password - Bearer: Token-based authentication - Digest: Hash-based authentication\nWe’ll cover authentication in detail in Chapter 6.\n\n\n\n\n\n\nControl the connection behavior:\n%%include\nGET https://httpbin.io/headers\nConnection: keep-alive\n\nkeep-alive: Reuse the connection for multiple requests\nclose: Close the connection after this request\n\n\n\n\nSpecify timeout and max requests for persistent connections:\n\n\n\nGET https://httpbin.io/headers\nConnection: keep-alive\nKeep-Alive: timeout=5, max=100\n\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nAccept: application/json\nUser-Agent: MyApp/1.0\nAuthorization: Bearer token123\nX-Request-ID: req-789\nX-Client-Version: 1.2.3\n\n{\n  \"action\": \"update\",\n  \"data\": {\n    \"field\": \"value\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/headers\nThis endpoint returns all headers it received, which is great for debugging.\n\n\n\n\nWhile httpbin.io doesn’t demonstrate all security headers, here are important ones:\n\n\n\nStrict-Transport-Security: Force HTTPS\nX-Content-Type-Options: Prevent MIME sniffing\nX-Frame-Options: Prevent clickjacking\nContent-Security-Policy: Control resource loading\nX-XSS-Protection: Enable XSS filter\n\nExample request (headers won’t affect httpbin.io, but shows the pattern):\n\n\n\nGET https://httpbin.io/headers\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n\n\n\nBe aware of limits: - Most servers limit total header size (8-16 KB typical) - Individual headers also have limits - URLs in request line have limits (2-8 KB typical)\n\n\n\n\nUse standard headers: Prefer standard headers over custom ones\nKeep headers small: Don’t send unnecessary data\nCase-insensitive names: Remember header names are case-insensitive\nSecurity: Don’t send sensitive data in headers unless necessary\nCompression: Use Accept-Encoding to reduce bandwidth\nCaching: Use cache headers appropriately\nContent negotiation: Use Accept headers for API versioning\n\nTry these on your own:\n\nSend a request with custom headers and verify they appear in the response\nRequest compressed content using Accept-Encoding: gzip\nSend a conditional request using If-None-Match\nExperiment with different Accept header values and priorities\nSend multiple cookies in a single request\n\n\nHeaders are key-value pairs that control HTTP behavior\nRequest headers: Provide info about the client and request\nResponse headers: Provide info about the server and response\nContent negotiation: Use Accept headers to specify desired format\nCaching: Use ETag, Cache-Control for efficient caching\nCustom headers: Can be used for application-specific data\nSecurity: Several headers enhance security (CORS, CSP, etc.)\n\nNow that you understand headers, let’s decode HTTP status codes in Chapter 4: Status Codes.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Headers and Fields\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 5: Fields\nSection 6.3: Header Fields\nSection 10: Message Context\nSection 12: Content Negotiation\n\n12.3: Accept\n12.4: Accept-Charset\n12.5: Accept-Encoding\n12.6: Accept-Language\n\n\n\n\n\n\nRFC 9111 - HTTP Caching\n\nSection 5: Field Definitions\n\n5.2: Cache-Control\n5.3: ETag\n\n\n\n\n\n\n\nRFC 6265 - HTTP State Management (Cookies)\nRFC 9113 - HTTP/2\n\nSection 8.2: HTTP Fields",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#header-format",
    "href": "chapters/03-http-headers.html#header-format",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Headers are key-value pairs sent before the body:\nHeader-Name: value\nAnother-Header: another value\nRules: - Header names are case-insensitive (Content-Type = content-type) - Values are case-sensitive - Multiple values can be comma-separated - Custom headers traditionally start with X- (though this is deprecated)\n\n\n\n\n\ngraph TD\n    A[HTTP Headers] --&gt; B[Request Headers]\n    A --&gt; C[Response Headers]\n    A --&gt; D[General Headers]\n\n    B --&gt; E[Accept]\n    B --&gt; F[Authorization]\n    B --&gt; G[User-Agent]\n    B --&gt; H[Cookie]\n\n    C --&gt; I[Content-Type]\n    C --&gt; J[Set-Cookie]\n    C --&gt; K[Server]\n    C --&gt; L[ETag]\n\n    D --&gt; M[Cache-Control]\n    D --&gt; N[Connection]\n    D --&gt; O[Date]\n\n    style B fill:#bbdefb\n    style C fill:#c8e6c9\n    style D fill:#fff9c4",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#request-headers",
    "href": "chapters/03-http-headers.html#request-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Request headers provide information about the client and the requested resource.\n\n\nHEAD https://httpbin.io/der\nThe Host header specifies the domain name of the server (required in HTTP/1.1):\n\n\n\nGET https://httpbin.io/headers\nHost: httpbin.io\n\n\n\nIdentifies the client making the request:\n\n\n\nGET https://httpbin.io/user-agent\nUser-Agent: Mozilla/5.0 (Training-Client) HTTP-Course/1.0\n\n\n\nTell the server what content types, encodings, and languages the client can handle:\n\n\n\nGET https://httpbin.io/headers\nAccept: application/json, text/html\nAccept-Language: en-US, fr-FR\nAccept-Encoding: gzip, deflate, br\n\n\n\n\n\n\nGET https://httpbin.io/headers\nAccept: application/json\n\n\n\n\nGET https://httpbin.io/headers\nAccept: application/xml, application/json;q=0.9\nThe q parameter indicates preference (0.0 to 1.0), with 1.0 being highest priority.\n\n\n\n\nIndicates the URL of the page that linked to the current request:\n\nGET https://httpbin.io/headers\nReferer: https://example.com/previous-page",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#response-headers",
    "href": "chapters/03-http-headers.html#response-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Response headers provide information about the server and the response.\n\n\nSpecifies the media type of the response body:\n\n\n\nGET https://httpbin.io/json\nLook for Content-Type: application/json in the response headers.\n\n\n\nIndicates the size of the response body in bytes:\n#| output: false\n\n%%include\nGET https://httpbin.io/get\nThe response will include Content-Length: 100 (output disabled as this returns binary data).\n\n\n\nIdentifies the server software:\n\n\n\nGET https://httpbin.io/headers\nLook for the Server header in the response (e.g., Server: nginx).",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#content-type-in-requests",
    "href": "chapters/03-http-headers.html#content-type-in-requests",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "When sending data, specify its format:\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"message\": \"This is JSON data\"\n}\nPOST https://httpbin.io/post\nContent-Type: application/xml\n\n&lt;message&gt;This is XML data&lt;/message&gt;\nPOST https://httpbin.io/post\nContent-Type: text/plain\n\n\"This is plain text data\"\n\n\nRequest content in specific languages:\n\nGET https://httpbin.io/headers\nAccept-Language: fr-FR, en-US;q=0.8, en;q=0.6\nThis requests: 1. French (France) - highest priority 2. English (US) - medium priority (0.8) 3. Any English - lower priority (0.6)",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#cache-control",
    "href": "chapters/03-http-headers.html#cache-control",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Controls caching behavior:\nGET https://httpbin.io/cache\nCache-Control: no-cache\nCommon Cache-Control directives: - no-cache: Validate with server before using cache - no-store: Don’t cache at all - max-age=3600: Cache for 3600 seconds - public: Can be cached by any cache - private: Can only be cached by browser\n\n\n\n\n\nflowchart TD\n    A[Cache-Control Directives] --&gt; B[Request]\n    A --&gt; C[Response]\n\n    B --&gt; D[no-cache: Revalidate]\n    B --&gt; E[no-store: Don't cache]\n    B --&gt; F[max-age: Time limit]\n\n    C --&gt; G[public: Any cache]\n    C --&gt; H[private: Browser only]\n    C --&gt; I[no-store: Don't cache]\n    C --&gt; J[max-age: Fresh duration]\n    C --&gt; K[must-revalidate: Check when stale]\n\n    style B fill:#bbdefb\n    style C fill:#c8e6c9\n\n\n\n\n\n\n\n\nETags enable conditional requests:\n\nGET https://httpbin.io/etag/test-etag-123\nGET https://httpbin.io/etag/test-etag-123\nIf-None-Match: \"test-etag-123\"\nIf the resource hasn’t changed, the server returns 304 Not Modified.\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client-&gt;&gt;Server: GET /resource\n    Server-&gt;&gt;Client: 200 OK&lt;br/&gt;ETag: \"abc123\"&lt;br/&gt;[Full Content]\n\n    Note over Client: Client caches resource&lt;br/&gt;with ETag \"abc123\"\n\n    Client-&gt;&gt;Server: GET /resource&lt;br/&gt;If-None-Match: \"abc123\"\n\n    alt Resource Unchanged\n        Server-&gt;&gt;Client: 304 Not Modified&lt;br/&gt;(no body, saves bandwidth)\n    else Resource Changed\n        Server-&gt;&gt;Client: 200 OK&lt;br/&gt;ETag: \"xyz789\"&lt;br/&gt;[New Content]\n    end\n\n\n\n\n\n\n\n\n\nRequest resource only if modified after a certain date:\nGET https://httpbin.io/headers\nIf-Modified-Since: Wed, 21 Oct 2024 07:28:00 GMT\n\n\n\nProceed only if resource hasn’t been modified:\nPUT https://httpbin.io/put\nIf-Unmodified-Since: Wed, 21 Oct 2024 07:28:00 GMT\nContent-Type: application/json\n\n{\n  \"data\": \"update only if not modified\"\n}\nYou can add custom headers for application-specific purposes:\nGET https://httpbin.io/headers\nX-Request-ID: abc-123-def-456\nX-Client-Version: 2.5.1\nX-Debug-Mode: true\nX-User-Region: EU-West\n\n\n\n\nUse descriptive names\nModern convention: avoid X- prefix (though still widely used)\nDocument custom headers in API documentation\nKeep values simple and parseable",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#cookies",
    "href": "chapters/03-http-headers.html#cookies",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "%%include\nGET https://httpbin.io/cookies/set?session=abc123&user=alice\nThe server responds with Set-Cookie headers.\n\n\n\n%%include\nGET https://httpbin.io/cookies\nCookie: session=abc123; user=alice",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#cors-headers",
    "href": "chapters/03-http-headers.html#cors-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Cross-Origin Resource Sharing (CORS) headers control cross-domain requests:\n%%include\nGET https://httpbin.io/get\nOrigin: https://example.com\nThe server may respond with: - Access-Control-Allow-Origin: Allowed origins - Access-Control-Allow-Methods: Allowed HTTP methods - Access-Control-Allow-Headers: Allowed headers - Access-Control-Max-Age: How long to cache preflight results\n\n\n\n\n\nsequenceDiagram\n    participant Browser\n    participant example.com\n    participant api.other.com\n\n    Browser-&gt;&gt;example.com: Load page\n    Note over Browser: JavaScript wants to&lt;br/&gt;call api.other.com\n\n    Browser-&gt;&gt;api.other.com: OPTIONS /api/data&lt;br/&gt;Origin: https://example.com&lt;br/&gt;Access-Control-Request-Method: POST\n\n    api.other.com-&gt;&gt;Browser: 200 OK&lt;br/&gt;Access-Control-Allow-Origin: *&lt;br/&gt;Access-Control-Allow-Methods: POST, GET\n\n    Browser-&gt;&gt;api.other.com: POST /api/data&lt;br/&gt;Origin: https://example.com\n\n    api.other.com-&gt;&gt;Browser: 200 OK&lt;br/&gt;Access-Control-Allow-Origin: *&lt;br/&gt;[Response Data]\n\n\n\n\n\n\n\n\n%%include\nOPTIONS https://httpbin.io/post\nOrigin: https://example.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type\nRequest partial content (useful for resuming downloads):\n%%verbose\n%%ouput=range1.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\nThis requests the first 500 bytes. The server responds with 206 Partial Content and includes: - Content-Range: Indicates which bytes are being returned - Accept-Ranges: Indicates support for range requests\n\n\n\n%%verbose\n%%ouput=range2.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-99, 200-299",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#compression-headers",
    "href": "chapters/03-http-headers.html#compression-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Request compressed responses:\n%%include\nGET https://httpbin.io/gzip\nAccept-Encoding: gzip, deflate, br\n[Options]\ncompressed: true\nThe server may compress the response and include Content-Encoding: gzip.\n\n\n\nIndicates the response is compressed:\n%%include\nGET https://httpbin.io/gzip\n[Options]\ncompressed: true\nLook for Content-Encoding: gzip in the response.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#authentication-headers",
    "href": "chapters/03-http-headers.html#authentication-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Send credentials with requests:\n%%include\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\nCommon schemes: - Basic: Base64-encoded username:password - Bearer: Token-based authentication - Digest: Hash-based authentication\nWe’ll cover authentication in detail in Chapter 6.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#connection-management",
    "href": "chapters/03-http-headers.html#connection-management",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Control the connection behavior:\n%%include\nGET https://httpbin.io/headers\nConnection: keep-alive\n\nkeep-alive: Reuse the connection for multiple requests\nclose: Close the connection after this request\n\n\n\n\nSpecify timeout and max requests for persistent connections:\n\n\n\nGET https://httpbin.io/headers\nConnection: keep-alive\nKeep-Alive: timeout=5, max=100",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#examples",
    "href": "chapters/03-http-headers.html#examples",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "POST https://httpbin.io/post\nContent-Type: application/json\nAccept: application/json\nUser-Agent: MyApp/1.0\nAuthorization: Bearer token123\nX-Request-ID: req-789\nX-Client-Version: 1.2.3\n\n{\n  \"action\": \"update\",\n  \"data\": {\n    \"field\": \"value\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/headers\nThis endpoint returns all headers it received, which is great for debugging.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#security-headers",
    "href": "chapters/03-http-headers.html#security-headers",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "While httpbin.io doesn’t demonstrate all security headers, here are important ones:\n\n\n\nStrict-Transport-Security: Force HTTPS\nX-Content-Type-Options: Prevent MIME sniffing\nX-Frame-Options: Prevent clickjacking\nContent-Security-Policy: Control resource loading\nX-XSS-Protection: Enable XSS filter\n\nExample request (headers won’t affect httpbin.io, but shows the pattern):\n\n\n\nGET https://httpbin.io/headers\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#header-size-limits",
    "href": "chapters/03-http-headers.html#header-size-limits",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Be aware of limits: - Most servers limit total header size (8-16 KB typical) - Individual headers also have limits - URLs in request line have limits (2-8 KB typical)",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#best-practices",
    "href": "chapters/03-http-headers.html#best-practices",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "Use standard headers: Prefer standard headers over custom ones\nKeep headers small: Don’t send unnecessary data\nCase-insensitive names: Remember header names are case-insensitive\nSecurity: Don’t send sensitive data in headers unless necessary\nCompression: Use Accept-Encoding to reduce bandwidth\nCaching: Use cache headers appropriately\nContent negotiation: Use Accept headers for API versioning\n\nTry these on your own:\n\nSend a request with custom headers and verify they appear in the response\nRequest compressed content using Accept-Encoding: gzip\nSend a conditional request using If-None-Match\nExperiment with different Accept header values and priorities\nSend multiple cookies in a single request\n\n\nHeaders are key-value pairs that control HTTP behavior\nRequest headers: Provide info about the client and request\nResponse headers: Provide info about the server and response\nContent negotiation: Use Accept headers to specify desired format\nCaching: Use ETag, Cache-Control for efficient caching\nCustom headers: Can be used for application-specific data\nSecurity: Several headers enhance security (CORS, CSP, etc.)\n\nNow that you understand headers, let’s decode HTTP status codes in Chapter 4: Status Codes.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/03-http-headers.html#rfc-references",
    "href": "chapters/03-http-headers.html#rfc-references",
    "title": "Chapter 3: HTTP Headers",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Headers and Fields\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 5: Fields\nSection 6.3: Header Fields\nSection 10: Message Context\nSection 12: Content Negotiation\n\n12.3: Accept\n12.4: Accept-Charset\n12.5: Accept-Encoding\n12.6: Accept-Language\n\n\n\n\n\n\nRFC 9111 - HTTP Caching\n\nSection 5: Field Definitions\n\n5.2: Cache-Control\n5.3: ETag\n\n\n\n\n\n\n\nRFC 6265 - HTTP State Management (Cookies)\nRFC 9113 - HTTP/2\n\nSection 8.2: HTTP Fields",
    "crumbs": [
      "Home",
      "Core Concepts",
      "3. HTTP Headers"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html",
    "href": "chapters/06-authentication.html",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Authentication verifies the identity of a client making requests. HTTP provides several mechanisms for authentication, each with different security characteristics and use cases.\n\n\n\nIdentify users: Know who is making requests\nIdentify users: Know who is making requests\nAuthorize access: Control what users can do\nTrack usage: Monitor API consumption\nPrevent abuse: Protect against unauthorized access\n\n\n\n\nMost authentication schemes use the Authorization header:\nAuthorization: &lt;scheme&gt; &lt;credentials&gt;\nCommon schemes: - Basic - Bearer - Digest - API-Key (non-standard)\n\n\n\n\n\ngraph TD\n    A[HTTP Authentication] --&gt; B[Authorization Header]\n    B --&gt; C[Basic Auth]\n    B --&gt; D[Bearer Token]\n    B --&gt; E[Digest Auth]\n    B --&gt; F[API Key]\n\n    C --&gt; G[Base64 encoded&lt;br/&gt;username:password]\n    D --&gt; H[Token string&lt;br/&gt;JWT, OAuth token]\n    E --&gt; I[MD5 hash&lt;br/&gt;challenge-response]\n    F --&gt; J[API key string&lt;br/&gt;custom header]\n\n    style C fill:#ffccbc\n    style D fill:#c8e6c9\n    style E fill:#fff9c4\n    style F fill:#bbdefb\n\n\n\n\n\n\n\n\n\nBasic Auth sends username and password encoded in Base64.\nBasic Auth sends username and password encoded in Base64.\n\n\nAuthorization: Basic base64(username:password)\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client-&gt;&gt;Server: GET /protected\n    Server-&gt;&gt;Client: 401 Unauthorized&lt;br/&gt;WWW-Authenticate: Basic realm=\"API\"\n\n    Note over Client: User provides&lt;br/&gt;username & password\n\n    Client-&gt;&gt;Client: Encode \"user:pass\"&lt;br/&gt;to Base64\n\n    Client-&gt;&gt;Server: GET /protected&lt;br/&gt;Authorization: Basic dXNlcjpwYXNz\n\n    alt Valid Credentials\n        Server-&gt;&gt;Client: 200 OK&lt;br/&gt;[Protected Resource]\n    else Invalid Credentials\n        Server-&gt;&gt;Client: 401 Unauthorized\n    end\n\n\n\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/alice/secret123\nAuthorization: Basic YWxpY2U6c2VjcmV0MTIz\nThe credential YWxpY2U6c2VjcmV0MTIz is Base64 encoding of alice:secret123.\n\n\n\n#| echo: true\n#| output: true\n\n# Correct credentials\nGET https://httpbin.io/basic-auth/user/pass\nAuthorization: Basic dXNlcjpwYXNz\n\n\n\n#| echo: true\n#| output: true\n\n# Wrong credentials - returns 401\nGET https://httpbin.io/basic-auth/alice/secret123\nAuthorization: Basic d3JvbmdjcmVkcw==\n\n\n\n\nCredentials are only Base64 encoded (NOT encrypted)\nEasily decoded: echo \"YWxpY2U6c2VjcmV0MTIz\" | base64 -d → alice:secret123\nMUST use HTTPS to protect credentials in transit\nPassword sent with every request\n\n\n\n\n\nInternal APIs over HTTPS\nSimple authentication needs\nDevelopment and testing\nLegacy system compatibility\n\n\n\n\n\nBearer tokens are opaque strings that represent authorization.\nBearer tokens are opaque strings that represent authorization.\n\n\nAuthorization: Bearer &lt;token&gt;\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer mySecretToken123456789\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFsaWNlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n\n\nJWTs (JSON Web Tokens) have three parts separated by dots:\nheader.payload.signature\nExample decoded JWT:\n// Header\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n\n// Payload\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"Alice\",\n  \"iat\": 1516239022,\n  \"exp\": 1516242622\n}\n\n\n\n\nStore securely (not in code)\nUse short expiration times\nImplement token refresh mechanism\nRevoke tokens when needed\nAlways use HTTPS\n\n\n\n\n\nAPI keys are similar to bearer tokens but often passed in different ways.\nAPI keys are similar to bearer tokens but often passed in different ways.\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nX-API-Key: sk_live_1234567890abcdef\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nX-Custom-Auth: api-key-here\nAPI-Token: another-key-format\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?api_key=sk_test_abcdefghijk&user=alice\nWarning: Query parameters appear in logs, so this is less secure!\n\n\n\n\nUse header over query parameter\nImplement rate limiting\nSupport key rotation\nLog key usage\nProvide key management UI\n\n\n\n\n\nSome APIs support multiple authentication schemes:\nSome APIs support multiple authentication schemes:\n#| echo: true\n#| output: true\n\n# Try Bearer token first\nGET https://httpbin.io/headers\nAuthorization: Bearer token123\nX-API-Key: fallback-key-456\n\n\n\n\n\n#| echo: true\n#| output: true\n\n# Step 1: Login with credentials\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice\",\n  \"password\": \"secret123\"\n}\nIn a real API, this would return a token:\n{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n\n\n\n#| echo: true\n#| output: true\n\n# Step 2: Use the token\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\n\n\n\nOAuth 2.0 is a widely-used authorization framework.\n\n\n\nAuthorization: User grants permission\nToken Exchange: App receives access token\nAPI Access: App uses token for requests\n\n\n\n\n\n\nsequenceDiagram\n    participant User\n    participant App as Client App\n    participant Auth as Auth Server\n    participant API as Resource Server\n\n    User-&gt;&gt;App: 1. Click \"Login with OAuth\"\n    App-&gt;&gt;Auth: 2. Authorization Request&lt;br/&gt;(redirect user)\n    Auth-&gt;&gt;User: 3. Login & Consent Screen\n    User-&gt;&gt;Auth: 4. Approve Access\n    Auth-&gt;&gt;App: 5. Authorization Code\n    App-&gt;&gt;Auth: 6. Exchange Code for Token&lt;br/&gt;(+ client credentials)\n    Auth-&gt;&gt;App: 7. Access Token + Refresh Token\n    App-&gt;&gt;API: 8. API Request&lt;br/&gt;Authorization: Bearer {token}\n    API-&gt;&gt;App: 9. Protected Resource\n\n\n\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer oauth2_access_token_here\n\n\n\n\nAccess Token: Short-lived, for API access\nRefresh Token: Long-lived, to get new access tokens\nID Token: Contains user information (OpenID Connect)\n\n\n\n\n\nMore secure than Basic Auth, uses MD5 hashing.\nMore secure than Basic Auth, uses MD5 hashing.\n\n\n#| echo: true\n#| output: true\n\n# Server challenges with 401 and WWW-Authenticate header\nGET https://httpbin.io/digest-auth/auth/user/pass\n\n\n\n#| echo: true\n#| output: true\n\n# Client responds with Authorization header containing hash\nGET https://httpbin.io/digest-auth/auth/user/pass\nAuthorization: Digest username=\"user\", realm=\"auth\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", uri=\"/digest-auth/auth/user/pass\", response=\"6629fae49393a05397450978507c4ef1\"\nNote: Hurl may handle digest auth automatically if supported.\n\n\n\n\nSome old systems use URL-embedded credentials (NOT recommended):\nSome old systems use URL-embedded credentials (NOT recommended):\nhttps://username:password@api.example.com/endpoint\nExample:\n#| echo: true\n#| output: true\n\n# This would work but is INSECURE\nGET https://httpbin.io/basic-auth/user/pass\nAuthorization: Basic dXNlcjpwYXNz\nNever use this pattern - credentials appear in logs and browser history.\n\n\n\nCommon in web applications with cookies.\nCommon in web applications with cookies.\n\n\n#| echo: true\n#| output: true\n\n# Login endpoint sets cookie\nGET https://httpbin.io/cookies/set?session=abc123xyz&user=alice\n\n\n\n#| echo: true\n#| output: true\n\n# Subsequent requests include cookie\nGET https://httpbin.io/cookies\nCookie: session=abc123xyz; user=alice\n\n\n\nCookies can have attributes for security: - HttpOnly: Not accessible via JavaScript - Secure: Only sent over HTTPS - SameSite: CSRF protection - Max-Age: Expiration time\n\n\n\n\nAPIs may require additional verification:\nAPIs may require additional verification:\n#| echo: true\n#| output: true\n\n# Send MFA code along with credentials\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice\",\n  \"password\": \"secret123\",\n  \"mfa_code\": \"123456\"\n}\n\n\n\nAuthenticated requests often have higher rate limits:\nAuthenticated requests often have higher rate limits:\n#| echo: true\n#| output: true\n\n# Unauthenticated: 60 requests/hour\nGET https://httpbin.io/get\n#| echo: true\n#| output: true\n\n# Authenticated: 5000 requests/hour\nGET https://httpbin.io/get\nAuthorization: Bearer token123\nLook for rate limit headers in responses: - X-RateLimit-Limit - X-RateLimit-Remaining - X-RateLimit-Reset\n\n\n\n\n\n\nAlways use HTTPS for authenticated requests\nStore credentials securely (environment variables, vaults)\nImplement token expiration\nUse appropriate auth for use case\nLog authentication attempts\nImplement rate limiting\nSupport credential rotation\nUse secure password policies\n\n\n\n\n\nDon’t store credentials in code\nDon’t log sensitive data\nDon’t send credentials in URLs\nDon’t use Basic Auth without HTTPS\nDon’t reuse tokens across services\nDon’t share API keys\nDon’t use weak passwords\nDon’t ignore certificate validation\n\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\nAuthorization: Basic dGVzdHVzZXI6dGVzdHBhc3M=\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\nAuthorization: Basic d3JvbmdjcmVkcw==\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\n\n\n\nIn real APIs, you’d test with an expired token and expect 401.\n\n\n\n\n\n\nMissing or invalid authentication:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\n# No Authorization header = 401\n\n\n\nAuthenticated but not authorized:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/status/403\nAuthorization: Bearer valid-token-insufficient-permissions\n\n\n\nRate limit exceeded:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/status/429\nAuthorization: Bearer token-over-rate-limit\n\n\n\n\n\n\n\nScheme\nSecurity\nComplexity\nUse Case\n\n\n\n\nBasic\nLow (needs HTTPS)\nVery Simple\nInternal APIs, simple auth\n\n\nBearer\nMedium-High\nSimple\nModern APIs, SPAs\n\n\nAPI Key\nMedium\nSimple\nService-to-service, webhooks\n\n\nOAuth 2.0\nHigh\nComplex\nThird-party integrations\n\n\nDigest\nMedium\nMedium\nLegacy systems\n\n\nSession\nMedium\nMedium\nWeb applications\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\n# Complete authenticated API interaction\n\n# 1. Login\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice@example.com\",\n  \"password\": \"SecureP@ssw0rd\"\n}\n#| echo: true\n#| output: true\n\n# 2. Use token for authenticated request\nGET https://httpbin.io/bearer\nAuthorization: Bearer returned-access-token-here\n#| echo: true\n#| output: true\n\n# 3. Create resource with authentication\nPOST https://httpbin.io/post\nAuthorization: Bearer returned-access-token-here\nContent-Type: application/json\n\n{\n  \"title\": \"New Resource\",\n  \"description\": \"Created with authenticated request\"\n}\n#| echo: true\n#| output: true\n\n# 4. Refresh token before expiration\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"refresh-token-here\"\n}\n\n\n\nTry these on your own:\n\nSend a Basic Auth request with different credentials\nCreate a Bearer token request with a mock JWT\nSend an API key in both header and query parameter\nTest authentication failure scenarios (wrong password, missing header)\nCombine authentication with other headers (Accept, Content-Type)\n\n\n\n\n\nBasic Auth: Simple but requires HTTPS, sends credentials with every request\nBearer Token: Modern standard, used with JWT and OAuth\nAPI Key: Simple, good for service-to-service auth\nAlways use HTTPS: Never send credentials over HTTP\nToken expiration: Implement short-lived tokens with refresh mechanism\nError handling: Return appropriate status codes (401, 403)\nSecurity first: Store credentials securely, implement rate limiting\n\n\n\n\nNow that you understand authentication, let’s explore advanced HTTP topics including CORS, caching, and HTTP/2 in Chapter 7: Advanced Topics.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Authentication Framework\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 11: HTTP Authentication\nSection 11.3: Authentication Scheme Registry\nSection 11.4: Credentials\nSection 11.5: Establishing a Protection Space\nSection 11.6: Authorization\nSection 11.6.1: WWW-Authenticate\n\n\n\n\n\nRFC 7617 - Basic Authentication Scheme\nRFC 7616 - Digest Access Authentication\n\n\n\n\n\nRFC 6750 - OAuth 2.0 Bearer Token Usage\nRFC 6749 - OAuth 2.0 Authorization Framework\nRFC 7519 - JSON Web Token (JWT)\n\n\n\n\n\nRFC 6265 - HTTP State Management (Cookies)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#why-authentication",
    "href": "chapters/06-authentication.html#why-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Identify users: Know who is making requests\nIdentify users: Know who is making requests\nAuthorize access: Control what users can do\nTrack usage: Monitor API consumption\nPrevent abuse: Protect against unauthorized access",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#the-authorization-header",
    "href": "chapters/06-authentication.html#the-authorization-header",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Most authentication schemes use the Authorization header:\nAuthorization: &lt;scheme&gt; &lt;credentials&gt;\nCommon schemes: - Basic - Bearer - Digest - API-Key (non-standard)\n\n\n\n\n\ngraph TD\n    A[HTTP Authentication] --&gt; B[Authorization Header]\n    B --&gt; C[Basic Auth]\n    B --&gt; D[Bearer Token]\n    B --&gt; E[Digest Auth]\n    B --&gt; F[API Key]\n\n    C --&gt; G[Base64 encoded&lt;br/&gt;username:password]\n    D --&gt; H[Token string&lt;br/&gt;JWT, OAuth token]\n    E --&gt; I[MD5 hash&lt;br/&gt;challenge-response]\n    F --&gt; J[API key string&lt;br/&gt;custom header]\n\n    style C fill:#ffccbc\n    style D fill:#c8e6c9\n    style E fill:#fff9c4\n    style F fill:#bbdefb",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#basic-authentication",
    "href": "chapters/06-authentication.html#basic-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Basic Auth sends username and password encoded in Base64.\nBasic Auth sends username and password encoded in Base64.\n\n\nAuthorization: Basic base64(username:password)\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client-&gt;&gt;Server: GET /protected\n    Server-&gt;&gt;Client: 401 Unauthorized&lt;br/&gt;WWW-Authenticate: Basic realm=\"API\"\n\n    Note over Client: User provides&lt;br/&gt;username & password\n\n    Client-&gt;&gt;Client: Encode \"user:pass\"&lt;br/&gt;to Base64\n\n    Client-&gt;&gt;Server: GET /protected&lt;br/&gt;Authorization: Basic dXNlcjpwYXNz\n\n    alt Valid Credentials\n        Server-&gt;&gt;Client: 200 OK&lt;br/&gt;[Protected Resource]\n    else Invalid Credentials\n        Server-&gt;&gt;Client: 401 Unauthorized\n    end\n\n\n\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/alice/secret123\nAuthorization: Basic YWxpY2U6c2VjcmV0MTIz\nThe credential YWxpY2U6c2VjcmV0MTIz is Base64 encoding of alice:secret123.\n\n\n\n#| echo: true\n#| output: true\n\n# Correct credentials\nGET https://httpbin.io/basic-auth/user/pass\nAuthorization: Basic dXNlcjpwYXNz\n\n\n\n#| echo: true\n#| output: true\n\n# Wrong credentials - returns 401\nGET https://httpbin.io/basic-auth/alice/secret123\nAuthorization: Basic d3JvbmdjcmVkcw==\n\n\n\n\nCredentials are only Base64 encoded (NOT encrypted)\nEasily decoded: echo \"YWxpY2U6c2VjcmV0MTIz\" | base64 -d → alice:secret123\nMUST use HTTPS to protect credentials in transit\nPassword sent with every request\n\n\n\n\n\nInternal APIs over HTTPS\nSimple authentication needs\nDevelopment and testing\nLegacy system compatibility",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#bearer-token-authentication",
    "href": "chapters/06-authentication.html#bearer-token-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Bearer tokens are opaque strings that represent authorization.\nBearer tokens are opaque strings that represent authorization.\n\n\nAuthorization: Bearer &lt;token&gt;\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer mySecretToken123456789\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFsaWNlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n\n\nJWTs (JSON Web Tokens) have three parts separated by dots:\nheader.payload.signature\nExample decoded JWT:\n// Header\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n\n// Payload\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"Alice\",\n  \"iat\": 1516239022,\n  \"exp\": 1516242622\n}\n\n\n\n\nStore securely (not in code)\nUse short expiration times\nImplement token refresh mechanism\nRevoke tokens when needed\nAlways use HTTPS",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#api-key-authentication",
    "href": "chapters/06-authentication.html#api-key-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "API keys are similar to bearer tokens but often passed in different ways.\nAPI keys are similar to bearer tokens but often passed in different ways.\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nX-API-Key: sk_live_1234567890abcdef\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/headers\nX-Custom-Auth: api-key-here\nAPI-Token: another-key-format\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?api_key=sk_test_abcdefghijk&user=alice\nWarning: Query parameters appear in logs, so this is less secure!\n\n\n\n\nUse header over query parameter\nImplement rate limiting\nSupport key rotation\nLog key usage\nProvide key management UI",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#multiple-authentication-methods",
    "href": "chapters/06-authentication.html#multiple-authentication-methods",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Some APIs support multiple authentication schemes:\nSome APIs support multiple authentication schemes:\n#| echo: true\n#| output: true\n\n# Try Bearer token first\nGET https://httpbin.io/headers\nAuthorization: Bearer token123\nX-API-Key: fallback-key-456",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#authentication-flow-examples",
    "href": "chapters/06-authentication.html#authentication-flow-examples",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "#| echo: true\n#| output: true\n\n# Step 1: Login with credentials\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice\",\n  \"password\": \"secret123\"\n}\nIn a real API, this would return a token:\n{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n\n\n\n#| echo: true\n#| output: true\n\n# Step 2: Use the token\nGET https://httpbin.io/bearer\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#oauth-2.0-concepts",
    "href": "chapters/06-authentication.html#oauth-2.0-concepts",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "OAuth 2.0 is a widely-used authorization framework.\n\n\n\nAuthorization: User grants permission\nToken Exchange: App receives access token\nAPI Access: App uses token for requests\n\n\n\n\n\n\nsequenceDiagram\n    participant User\n    participant App as Client App\n    participant Auth as Auth Server\n    participant API as Resource Server\n\n    User-&gt;&gt;App: 1. Click \"Login with OAuth\"\n    App-&gt;&gt;Auth: 2. Authorization Request&lt;br/&gt;(redirect user)\n    Auth-&gt;&gt;User: 3. Login & Consent Screen\n    User-&gt;&gt;Auth: 4. Approve Access\n    Auth-&gt;&gt;App: 5. Authorization Code\n    App-&gt;&gt;Auth: 6. Exchange Code for Token&lt;br/&gt;(+ client credentials)\n    Auth-&gt;&gt;App: 7. Access Token + Refresh Token\n    App-&gt;&gt;API: 8. API Request&lt;br/&gt;Authorization: Bearer {token}\n    API-&gt;&gt;App: 9. Protected Resource\n\n\n\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\nAuthorization: Bearer oauth2_access_token_here\n\n\n\n\nAccess Token: Short-lived, for API access\nRefresh Token: Long-lived, to get new access tokens\nID Token: Contains user information (OpenID Connect)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#digest-authentication",
    "href": "chapters/06-authentication.html#digest-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "More secure than Basic Auth, uses MD5 hashing.\nMore secure than Basic Auth, uses MD5 hashing.\n\n\n#| echo: true\n#| output: true\n\n# Server challenges with 401 and WWW-Authenticate header\nGET https://httpbin.io/digest-auth/auth/user/pass\n\n\n\n#| echo: true\n#| output: true\n\n# Client responds with Authorization header containing hash\nGET https://httpbin.io/digest-auth/auth/user/pass\nAuthorization: Digest username=\"user\", realm=\"auth\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", uri=\"/digest-auth/auth/user/pass\", response=\"6629fae49393a05397450978507c4ef1\"\nNote: Hurl may handle digest auth automatically if supported.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#hidden-basic-auth-legacy",
    "href": "chapters/06-authentication.html#hidden-basic-auth-legacy",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Some old systems use URL-embedded credentials (NOT recommended):\nSome old systems use URL-embedded credentials (NOT recommended):\nhttps://username:password@api.example.com/endpoint\nExample:\n#| echo: true\n#| output: true\n\n# This would work but is INSECURE\nGET https://httpbin.io/basic-auth/user/pass\nAuthorization: Basic dXNlcjpwYXNz\nNever use this pattern - credentials appear in logs and browser history.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#session-based-authentication",
    "href": "chapters/06-authentication.html#session-based-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Common in web applications with cookies.\nCommon in web applications with cookies.\n\n\n#| echo: true\n#| output: true\n\n# Login endpoint sets cookie\nGET https://httpbin.io/cookies/set?session=abc123xyz&user=alice\n\n\n\n#| echo: true\n#| output: true\n\n# Subsequent requests include cookie\nGET https://httpbin.io/cookies\nCookie: session=abc123xyz; user=alice\n\n\n\nCookies can have attributes for security: - HttpOnly: Not accessible via JavaScript - Secure: Only sent over HTTPS - SameSite: CSRF protection - Max-Age: Expiration time",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#multi-factor-authentication-mfa",
    "href": "chapters/06-authentication.html#multi-factor-authentication-mfa",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "APIs may require additional verification:\nAPIs may require additional verification:\n#| echo: true\n#| output: true\n\n# Send MFA code along with credentials\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice\",\n  \"password\": \"secret123\",\n  \"mfa_code\": \"123456\"\n}",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#rate-limiting-and-authentication",
    "href": "chapters/06-authentication.html#rate-limiting-and-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Authenticated requests often have higher rate limits:\nAuthenticated requests often have higher rate limits:\n#| echo: true\n#| output: true\n\n# Unauthenticated: 60 requests/hour\nGET https://httpbin.io/get\n#| echo: true\n#| output: true\n\n# Authenticated: 5000 requests/hour\nGET https://httpbin.io/get\nAuthorization: Bearer token123\nLook for rate limit headers in responses: - X-RateLimit-Limit - X-RateLimit-Remaining - X-RateLimit-Reset",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#security-best-practices",
    "href": "chapters/06-authentication.html#security-best-practices",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Always use HTTPS for authenticated requests\nStore credentials securely (environment variables, vaults)\nImplement token expiration\nUse appropriate auth for use case\nLog authentication attempts\nImplement rate limiting\nSupport credential rotation\nUse secure password policies\n\n\n\n\n\nDon’t store credentials in code\nDon’t log sensitive data\nDon’t send credentials in URLs\nDon’t use Basic Auth without HTTPS\nDon’t reuse tokens across services\nDon’t share API keys\nDon’t use weak passwords\nDon’t ignore certificate validation",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#testing-authentication",
    "href": "chapters/06-authentication.html#testing-authentication",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\nAuthorization: Basic dGVzdHVzZXI6dGVzdHBhc3M=\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\nAuthorization: Basic d3JvbmdjcmVkcw==\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/basic-auth/testuser/testpass\n\n\n\nIn real APIs, you’d test with an expired token and expect 401.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#common-authentication-errors",
    "href": "chapters/06-authentication.html#common-authentication-errors",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Missing or invalid authentication:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/bearer\n# No Authorization header = 401\n\n\n\nAuthenticated but not authorized:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/status/403\nAuthorization: Bearer valid-token-insufficient-permissions\n\n\n\nRate limit exceeded:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/status/429\nAuthorization: Bearer token-over-rate-limit",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#authentication-comparison",
    "href": "chapters/06-authentication.html#authentication-comparison",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Scheme\nSecurity\nComplexity\nUse Case\n\n\n\n\nBasic\nLow (needs HTTPS)\nVery Simple\nInternal APIs, simple auth\n\n\nBearer\nMedium-High\nSimple\nModern APIs, SPAs\n\n\nAPI Key\nMedium\nSimple\nService-to-service, webhooks\n\n\nOAuth 2.0\nHigh\nComplex\nThird-party integrations\n\n\nDigest\nMedium\nMedium\nLegacy systems\n\n\nSession\nMedium\nMedium\nWeb applications",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#real-world-authentication-example",
    "href": "chapters/06-authentication.html#real-world-authentication-example",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "#| echo: true\n#| output: true\n\n# Complete authenticated API interaction\n\n# 1. Login\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"username\": \"alice@example.com\",\n  \"password\": \"SecureP@ssw0rd\"\n}\n#| echo: true\n#| output: true\n\n# 2. Use token for authenticated request\nGET https://httpbin.io/bearer\nAuthorization: Bearer returned-access-token-here\n#| echo: true\n#| output: true\n\n# 3. Create resource with authentication\nPOST https://httpbin.io/post\nAuthorization: Bearer returned-access-token-here\nContent-Type: application/json\n\n{\n  \"title\": \"New Resource\",\n  \"description\": \"Created with authenticated request\"\n}\n#| echo: true\n#| output: true\n\n# 4. Refresh token before expiration\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"refresh-token-here\"\n}",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#practice-exercises",
    "href": "chapters/06-authentication.html#practice-exercises",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Try these on your own:\n\nSend a Basic Auth request with different credentials\nCreate a Bearer token request with a mock JWT\nSend an API key in both header and query parameter\nTest authentication failure scenarios (wrong password, missing header)\nCombine authentication with other headers (Accept, Content-Type)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#key-takeaways",
    "href": "chapters/06-authentication.html#key-takeaways",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Basic Auth: Simple but requires HTTPS, sends credentials with every request\nBearer Token: Modern standard, used with JWT and OAuth\nAPI Key: Simple, good for service-to-service auth\nAlways use HTTPS: Never send credentials over HTTP\nToken expiration: Implement short-lived tokens with refresh mechanism\nError handling: Return appropriate status codes (401, 403)\nSecurity first: Store credentials securely, implement rate limiting",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#next-steps",
    "href": "chapters/06-authentication.html#next-steps",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "Now that you understand authentication, let’s explore advanced HTTP topics including CORS, caching, and HTTP/2 in Chapter 7: Advanced Topics.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "chapters/06-authentication.html#rfc-references",
    "href": "chapters/06-authentication.html#rfc-references",
    "title": "Chapter 6: Authentication",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Authentication Framework\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 11: HTTP Authentication\nSection 11.3: Authentication Scheme Registry\nSection 11.4: Credentials\nSection 11.5: Establishing a Protection Space\nSection 11.6: Authorization\nSection 11.6.1: WWW-Authenticate\n\n\n\n\n\nRFC 7617 - Basic Authentication Scheme\nRFC 7616 - Digest Access Authentication\n\n\n\n\n\nRFC 6750 - OAuth 2.0 Bearer Token Usage\nRFC 6749 - OAuth 2.0 Authorization Framework\nRFC 7519 - JSON Web Token (JWT)\n\n\n\n\n\nRFC 6265 - HTTP State Management (Cookies)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "6. Authentication"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "This comprehensive training course will teach you everything you need to know about the Hypertext Transfer Protocol (HTTP), the foundation of data communication on the World Wide Web.\n\n\nThroughout this course, you’ll gain hands-on experience with:\n\nHTTP Protocol Basics: Understand how HTTP works at a fundamental level\nRequest Methods: Master GET, POST, PUT, DELETE, PATCH, and more\nHTTP Headers: Learn how headers control request and response behavior\nStatus Codes: Decode the meaning behind 200, 404, 500, and all other codes\nRequest & Response Bodies: Work with JSON, form data, and other formats\nAuthentication: Implement Basic Auth, Bearer tokens, and API keys\nAdvanced Topics: Explore CORS, caching, compression, and HTTP/2\n\n\n\n\nAll examples in this course use Hurl, a command-line tool for running and testing HTTP requests. You can run these examples directly in this documentation!\n\n\nLet’s start with a simple example - getting your IP address:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/ip\nThis request demonstrates:\n\nThe GET method (retrieving data)\nThe URL (https://httpbin.io/ip)\nThe response showing your IP address in JSON format\n\n\n\n\n\nThe course is organized into seven chapters, progressing from fundamentals to advanced topics:\n\nHTTP Basics - Protocol overview, URLs, and the request/response cycle\nHTTP Methods - Deep dive into GET, POST, PUT, DELETE, PATCH, HEAD, and OPTIONS\nHTTP Headers - Common headers, custom headers, and their purposes\nStatus Codes - Understanding 1xx, 2xx, 3xx, 4xx, and 5xx responses\nRequest & Response - Working with different content types and payloads\nAuthentication - Securing your HTTP requests\nAdvanced Topics - CORS, caching, compression, and modern HTTP features\n\n\n\n\nTo get the most out of this course, you should have:\n\nBasic understanding of client-server architecture\nFamiliarity with JSON format\nA web browser (for the httpbin.io examples)\n\nNo prior HTTP knowledge is required - we’ll build from the ground up!\n\n\n\nThis course is based on the latest HTTP specifications:\n\nRFC 9110 - HTTP Semantics (June 2022) - Core HTTP specification\nRFC 9111 - HTTP Caching (June 2022)\nRFC 9112 - HTTP/1.1 (June 2022)\nRFC 9113 - HTTP/2 (June 2022)\nRFC 9114 - HTTP/3 (June 2022)\n\nThese RFCs replace the older RFC 7230-7237 series. Each chapter includes specific RFC section references for deeper study.\n\n\n\nReady to dive in? Start with Chapter 1: HTTP Basics to learn the fundamentals of the HTTP protocol.\n\n\n\nThroughout this course, we use httpbin.io, a free HTTP request & response service. It’s perfect for testing and learning because it:\n\nReturns exactly what you send\nSupports all HTTP methods\nProvides endpoints for testing various scenarios\nReturns responses in JSON format\n\nLet’s test it with a simple echo request:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?course=http-fundamentals&level=beginner\nNotice how httpbin.io returns all the details of your request, including query parameters, headers, and origin IP. This makes it an excellent learning tool!\n\nReady to begin? Click on Chapter 1: HTTP Basics in the sidebar to start your journey into HTTP fundamentals!",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#what-youll-learn",
    "href": "index.html#what-youll-learn",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "Throughout this course, you’ll gain hands-on experience with:\n\nHTTP Protocol Basics: Understand how HTTP works at a fundamental level\nRequest Methods: Master GET, POST, PUT, DELETE, PATCH, and more\nHTTP Headers: Learn how headers control request and response behavior\nStatus Codes: Decode the meaning behind 200, 404, 500, and all other codes\nRequest & Response Bodies: Work with JSON, form data, and other formats\nAuthentication: Implement Basic Auth, Bearer tokens, and API keys\nAdvanced Topics: Explore CORS, caching, compression, and HTTP/2",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#interactive-learning-with-hurl",
    "href": "index.html#interactive-learning-with-hurl",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "All examples in this course use Hurl, a command-line tool for running and testing HTTP requests. You can run these examples directly in this documentation!\n\n\nLet’s start with a simple example - getting your IP address:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/ip\nThis request demonstrates:\n\nThe GET method (retrieving data)\nThe URL (https://httpbin.io/ip)\nThe response showing your IP address in JSON format",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "The course is organized into seven chapters, progressing from fundamentals to advanced topics:\n\nHTTP Basics - Protocol overview, URLs, and the request/response cycle\nHTTP Methods - Deep dive into GET, POST, PUT, DELETE, PATCH, HEAD, and OPTIONS\nHTTP Headers - Common headers, custom headers, and their purposes\nStatus Codes - Understanding 1xx, 2xx, 3xx, 4xx, and 5xx responses\nRequest & Response - Working with different content types and payloads\nAuthentication - Securing your HTTP requests\nAdvanced Topics - CORS, caching, compression, and modern HTTP features",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "To get the most out of this course, you should have:\n\nBasic understanding of client-server architecture\nFamiliarity with JSON format\nA web browser (for the httpbin.io examples)\n\nNo prior HTTP knowledge is required - we’ll build from the ground up!",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#http-rfcs-reference",
    "href": "index.html#http-rfcs-reference",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "This course is based on the latest HTTP specifications:\n\nRFC 9110 - HTTP Semantics (June 2022) - Core HTTP specification\nRFC 9111 - HTTP Caching (June 2022)\nRFC 9112 - HTTP/1.1 (June 2022)\nRFC 9113 - HTTP/2 (June 2022)\nRFC 9114 - HTTP/3 (June 2022)\n\nThese RFCs replace the older RFC 7230-7237 series. Each chapter includes specific RFC section references for deeper study.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#lets-get-started",
    "href": "index.html#lets-get-started",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "Ready to dive in? Start with Chapter 1: HTTP Basics to learn the fundamentals of the HTTP protocol.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#about-httpbin.io",
    "href": "index.html#about-httpbin.io",
    "title": "HTTP Fundamentals Training",
    "section": "",
    "text": "Throughout this course, we use httpbin.io, a free HTTP request & response service. It’s perfect for testing and learning because it:\n\nReturns exactly what you send\nSupports all HTTP methods\nProvides endpoints for testing various scenarios\nReturns responses in JSON format\n\nLet’s test it with a simple echo request:\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?course=http-fundamentals&level=beginner\nNotice how httpbin.io returns all the details of your request, including query parameters, headers, and origin IP. This makes it an excellent learning tool!\n\nReady to begin? Click on Chapter 1: HTTP Basics in the sidebar to start your journey into HTTP fundamentals!",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "docs/DEPLOYMENT.html",
    "href": "docs/DEPLOYMENT.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#automatic-deployment",
    "href": "docs/DEPLOYMENT.html#automatic-deployment",
    "title": "",
    "section": "Automatic Deployment",
    "text": "Automatic Deployment\nEvery push to the main or master branch will automatically trigger a deployment workflow that:\n\nChecks out the repository\nSets up Quarto\nInstalls Python and dependencies (jupyter, jupyter-hurl-kernel)\nRenders all Quarto documents\nPublishes to GitHub Pages"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#initial-setup",
    "href": "docs/DEPLOYMENT.html#initial-setup",
    "title": "",
    "section": "Initial Setup",
    "text": "Initial Setup\n\n1. Enable GitHub Pages\n\nGo to your repository Settings → Pages\nUnder Source, select Deploy from a branch\nSelect the gh-pages branch\nClick Save\n\n\n\n2. Configure Workflow Permissions\n\nGo to Settings → Actions → General\nScroll to Workflow permissions\nSelect Read and write permissions\nCheck Allow GitHub Actions to create and approve pull requests\nClick Save\n\n\n\n3. Initial Publish (Optional)\nYou can manually trigger the first deployment:\n\nGo to Actions tab in your repository\nSelect Publish Quarto to GitHub Pages workflow\nClick Run workflow\nSelect the branch and click Run workflow\n\nOr, simply push a commit to the main/master branch."
  },
  {
    "objectID": "docs/DEPLOYMENT.html#manual-deployment",
    "href": "docs/DEPLOYMENT.html#manual-deployment",
    "title": "",
    "section": "Manual Deployment",
    "text": "Manual Deployment\nTo manually publish from your local machine:\n# First time only - initializes gh-pages branch\nquarto publish gh-pages\n\n# Subsequent publishes\nquarto publish gh-pages"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#workflow-details",
    "href": "docs/DEPLOYMENT.html#workflow-details",
    "title": "",
    "section": "Workflow Details",
    "text": "Workflow Details\nThe GitHub Actions workflow is defined in .github/workflows/publish.yml:\n\nTrigger: Pushes to main/master branch, or manual dispatch\nRunner: Ubuntu latest\nPython: 3.11\nDependencies: Installed from requirements.txt\nTarget: GitHub Pages (gh-pages branch)"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#project-structure-for-deployment",
    "href": "docs/DEPLOYMENT.html#project-structure-for-deployment",
    "title": "",
    "section": "Project Structure for Deployment",
    "text": "Project Structure for Deployment\nhttp-fondamentals/\n├── .github/\n│   └── workflows/\n│       └── publish.yml          # GitHub Actions workflow\n├── requirements.txt             # Python dependencies for CI\n├── _quarto.yml                  # Quarto configuration\n└── [content files]"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#troubleshooting",
    "href": "docs/DEPLOYMENT.html#troubleshooting",
    "title": "",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nWorkflow Fails with Permission Error\nSolution: Ensure workflow permissions are set to “Read and write” in repository settings.\n\n\nPages Not Updating\nChecks: 1. Verify the workflow completed successfully in Actions tab 2. Check that GitHub Pages is configured to deploy from gh-pages branch 3. Clear browser cache and hard refresh (Ctrl+Shift+R / Cmd+Shift+R)\n\n\nPython Dependencies Not Found\nSolution: Ensure all required packages are listed in requirements.txt\n\n\nHurl Kernel Error\nSolution: The jupyter-hurl-kernel package should be in requirements.txt and will be installed by the workflow."
  },
  {
    "objectID": "docs/DEPLOYMENT.html#site-url",
    "href": "docs/DEPLOYMENT.html#site-url",
    "title": "",
    "section": "Site URL",
    "text": "Site URL\nAfter deployment, your site will be available at:\nhttps://&lt;username&gt;.github.io/&lt;repository-name&gt;/\nFor example: https://myorg.github.io/http-fondamentals/"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#local-testing",
    "href": "docs/DEPLOYMENT.html#local-testing",
    "title": "",
    "section": "Local Testing",
    "text": "Local Testing\nBefore pushing, test your site locally:\n# Install dependencies\nuv sync\n\n# Render the site\nuv run quarto render\n\n# Preview locally\nuv run quarto preview"
  },
  {
    "objectID": "docs/DEPLOYMENT.html#freeze-configuration",
    "href": "docs/DEPLOYMENT.html#freeze-configuration",
    "title": "",
    "section": "Freeze Configuration",
    "text": "Freeze Configuration\nThis project uses freeze: auto in _quarto.yml, which means:\n\nLocally: Code execution is cached in _freeze/ directory (ignored by git)\nCI/CD: Code is always re-executed on every build\n\nThis ensures reproducible builds in CI while maintaining fast local previews."
  },
  {
    "objectID": "chapters/07-advanced.html",
    "href": "chapters/07-advanced.html",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "This chapter covers advanced HTTP concepts that are crucial for building production-ready APIs and web applications.\nCORS is a security mechanism that controls how web pages from one domain can request resources from another domain.\n\n\n\n\nBrowsers enforce the Same-Origin Policy for security: - https://example.com cannot access https://api.other.com by default - CORS headers explicitly allow cross-origin requests\n\n\n\n\n\ngraph TD\n    A[Browser loads page from&lt;br/&gt;example.com] --&gt; B[JavaScript tries to&lt;br/&gt;fetch api.other.com]\n    B --&gt; C{Same Origin?}\n\n    C --&gt;|Yes&lt;br/&gt;same domain| D[Request allowed ✓]\n    C --&gt;|No&lt;br/&gt;different domain| E{CORS headers present?}\n\n    E --&gt;|Yes&lt;br/&gt;Access-Control-Allow-Origin| F[Request allowed ✓]\n    E --&gt;|No| G[Request blocked ✗&lt;br/&gt;CORS error]\n\n    style D fill:#c8e6c9\n    style F fill:#c8e6c9\n    style G fill:#ffccbc\n\n\n\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nOrigin: https://example.com\nThe server responds with CORS headers: - Access-Control-Allow-Origin: Which origins are allowed - Access-Control-Allow-Methods: Which HTTP methods are allowed - Access-Control-Allow-Headers: Which headers are allowed\n\n\n\nFor complex requests (POST with JSON, custom headers), browsers send an OPTIONS request first:\n\n\n\nOPTIONS https://httpbin.io/post\nOrigin: https://example.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type, Authorization\n\n\n\n\n\n\nGET https://httpbin.io/get\nOrigin: https://myapp.com\nLook for these headers in the response:\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Max-Age: 86400\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nOrigin: https://example.com\nCookie: session=abc123\nWhen sending credentials (cookies, auth headers), the server must respond with:\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Credentials: true\nNote: Cannot use Access-Control-Allow-Origin: * with credentials.\n\n\nAllowing all origins (permissive):\nAccess-Control-Allow-Origin: *\nAllowing specific origin:\nAccess-Control-Allow-Origin: https://trusted-app.com\nAllowing multiple origins: Server must check the Origin header and respond dynamically.\nCaching improves performance by storing and reusing previous responses.\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Cache\n    participant Server\n\n    Client-&gt;&gt;Server: GET /data\n    Server-&gt;&gt;Client: 200 OK&lt;br/&gt;Cache-Control: max-age=3600&lt;br/&gt;Data\n\n    Note over Client,Cache: Resource cached for 1 hour\n\n    Client-&gt;&gt;Cache: GET /data (within 1 hour)\n    Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;Data (from cache)\n\n    Note over Client,Cache: Fast! No server roundtrip\n\n    Client-&gt;&gt;Cache: GET /data (after 1 hour)\n    Cache-&gt;&gt;Server: GET /data&lt;br/&gt;If-None-Match: \"etag123\"\n\n    alt Not Modified\n        Server-&gt;&gt;Cache: 304 Not Modified\n        Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;Data (from cache)\n    else Modified\n        Server-&gt;&gt;Cache: 200 OK&lt;br/&gt;New Data\n        Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;New Data\n    end\n\n\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/cache\nCache-Control: max-age=3600\n\n\n\n\nRequest Directives: - no-cache: Validate with server before using cache - no-store: Don’t cache at all - max-age=N: Use cached version if less than N seconds old - max-stale=N: Accept stale responses up to N seconds - min-fresh=N: Require response to be fresh for at least N seconds\nResponse Directives: - public: Cacheable by any cache (CDN, browser) - private: Only cacheable by browser - no-cache: Must revalidate before using - no-store: Don’t cache anywhere - max-age=N: Fresh for N seconds - s-maxage=N: Fresh for N seconds in shared caches - must-revalidate: Must validate when stale\n\n\n\n\n\n\nGET https://httpbin.io/get\nCache-Control: no-store\n\n\n\n\nGET https://httpbin.io/cache/3600\nCache-Control: private, max-age=3600\n\n\n\n\nGET https://httpbin.io/cache\nCache-Control: public, max-age=3600, s-maxage=86400\n\n\n\nETags enable efficient cache validation:\n\n\n\n\nGET https://httpbin.io/etag/abc123def456\n\n\n\n\nGET https://httpbin.io/etag/abc123def456\nIf-None-Match: \"abc123def456\"\nIf unchanged, server returns 304 Not Modified with no body, saving bandwidth.\n\n\n\n\n\n\n\n\nGET https://httpbin.io/response-headers?Last-Modified=Mon,%2027%20Oct%202024%2015:30:00%20GMT\n\n\n\n\nGET https://httpbin.io/response-headers?Last-Modified=Mon,%2027%20Oct%202024%2015:30:00%20GMT\nIf-Modified-Since: Mon, 27 Oct 2024 15:30:00 GMT\n\n\nTells caches which request headers affect the response:\n\n%%include\nGET https://httpbin.io/response-headers?Vary=Accept-Encoding,%20Accept-Language\nAccept-Encoding: gzip\nAccept-Language: en-US\n[Options]\ncompressed: true\nThe cache must store separate versions for different combinations of these headers.\nCompression reduces bandwidth and improves performance.\n\n\n\n\n\n\n%%include\nGET https://httpbin.io/gzip\nAccept-Encoding: gzip\n[Options]\ncompressed: true\nResponse includes: Content-Encoding: gzip\n\n\n\n%%include\nGET https://httpbin.io/deflate\nAccept-Encoding: deflate\n[Options]\ncompressed: true\n\n\n\n%%include\nGET https://httpbin.io/brotli\nAccept-Encoding: br\n[Options]\ncompressed: true\nBrotli typically provides better compression than gzip.\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept-Encoding: br, gzip, deflate\nServer chooses the best supported algorithm.\n\n\n\nCompress: - Text content (HTML, CSS, JavaScript, JSON, XML) - Large responses - API responses\nDon’t Compress: - Already compressed (images, videos, PDFs) - Very small responses (overhead not worth it) - Streaming data that needs immediate access\nClients and servers negotiate the best content format.\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept: application/json, application/xml;q=0.9, text/plain;q=0.8\nQuality values (q) indicate preference (0.0 to 1.0, default 1.0).\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept-Language: fr-FR, en-US;q=0.9, en;q=0.8\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept-Charset: utf-8, iso-8859-1;q=0.7\n\n\n\nAlready covered in compression section.\n\n\n\n\n\nGET https://httpbin.io/get\nAccept: application/json;q=1.0, application/xml;q=0.8\nAccept-Language: en-US, fr;q=0.8\nAccept-Encoding: br, gzip\nAccept-Charset: utf-8\nRequest partial content, useful for resuming downloads or streaming.\n\n\n\n\n\n\n%%verbose\n%%output=request-range.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\nServer responds with 206 Partial Content and Content-Range header.\n\n\n\n%%verbose\n%%output=request-range2.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-99, 200-299, 400-499\n\n\n\n\n%%verbose\n%%output=request-range3.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\n%%verbose\n%%output=request-range4.bin\nGET https://httpbin.io/range/1000\nRange: bytes=500-999\n\n\nIndicates server supports range requests:\n\n%%include\nHEAD https://httpbin.io/range/1000\nLook for Accept-Ranges: bytes in response.\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nConnection: keep-alive\nReuses the TCP connection for multiple requests (default in HTTP/1.1).\n\n\n\n\n\nGET https://httpbin.io/get\nConnection: close\nCloses connection after this request.\n\n\n\n\n\n\nGET https://httpbin.io/get\nConnection: keep-alive\nKeep-Alive: timeout=5, max=100\n\ntimeout=5: Keep connection open for 5 seconds\nmax=100: Allow 100 requests on this connection\n\nHTTP/2 brings significant improvements over HTTP/1.1:\n\n\n\n\n\n\n\n\ngraph TD\n    A[HTTP/2 Improvements] --&gt; B[Multiplexing]\n    A --&gt; C[Server Push]\n    A --&gt; D[Header Compression]\n    A --&gt; E[Binary Protocol]\n    A --&gt; F[Stream Priority]\n\n    B --&gt; B1[Multiple requests&lt;br/&gt;on single connection]\n    C --&gt; C1[Server sends resources&lt;br/&gt;before requested]\n    D --&gt; D1[HPACK compression&lt;br/&gt;reduces overhead]\n    E --&gt; E1[Binary framing&lt;br/&gt;faster parsing]\n    F --&gt; F1[Prioritize critical&lt;br/&gt;resources]\n\n    style A fill:#e1f5ff\n    style B fill:#c8e6c9\n    style C fill:#c8e6c9\n    style D fill:#c8e6c9\n    style E fill:#c8e6c9\n    style F fill:#c8e6c9\n\n\n\n\n\n\n\n\nMultiple requests/responses on single connection simultaneously.\n\n\n\n\nServer can proactively send resources to client.\n\n\nHPACK compression reduces header overhead.\n\n\n\n\nMore efficient parsing than text-based HTTP/1.1.\n\n\nClients can prioritize important resources.\n\n\n\n\n%%include\nGET https://httpbin.io/get\nCheck response protocol in output - may show HTTP/2 if supported.\n\n\n\n\nHTTP/3 uses QUIC (over UDP) instead of TCP:\n\nFaster connection establishment\nBetter handling of packet loss\nImproved performance on mobile networks\n\n\n\n\n\n\n\n\n\n\n%%include\n\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=301\n\n\n\n%%include\n\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=302\n\n\n\n%%include\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=307\n\n\n\n\n\n\nGET https://httpbin.io/redirect/3\nThis redirects 3 times before returning final response.\n\n\n\n\n\n\n\nGET https://httpbin.io/absolute-redirect/1\n\n\n\n\nGET https://httpbin.io/relative-redirect/1\n\n\n\n\nAPIs implement rate limiting to prevent abuse.\n\n\n\n\n\nGET https://httpbin.io/get\nLook for headers like:\nX-RateLimit-Limit: 5000\nX-RateLimit-Remaining: 4999\nX-RateLimit-Reset: 1640995200\n\n\n\n\n\n\n\n\nGET https://httpbin.io/status/429\nResponse includes Retry-After header indicating when to retry.\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/delay/2\nThis delays response by 2 seconds.\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/response-headers?Strict-Transport-Security=max-age=31536000&X-Content-Type-Options=nosniff&X-Frame-Options=DENY\nImportant security headers: - Strict-Transport-Security: Force HTTPS - X-Content-Type-Options: nosniff: Prevent MIME sniffing - X-Frame-Options: DENY: Prevent clickjacking - Content-Security-Policy: Control resource loading - X-XSS-Protection: Enable XSS filter (legacy)\n\n\n\n\nWebhooks allow servers to push data to clients.\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nX-Webhook-Signature: sha256=abc123def456\n\n{\n  \"event\": \"user.created\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"data\": {\n    \"user_id\": 123,\n    \"email\": \"newuser@example.com\"\n  }\n}\n\n\n\nClient repeatedly requests updates until new data is available.\n\n\n\n\nGET https://httpbin.io/delay/5\nServer holds connection open until data is available or timeout.\n\n\n\nOne-way streaming from server to client.\n\n\n\nGET https://httpbin.io/stream/5\nAccept: text/event-stream\n\n\n\n\nComplete lifecycle of an HTTP request:\n\nDNS Resolution: Resolve hostname to IP\nTCP Connection: Three-way handshake\nTLS Handshake: (HTTPS only) Establish encryption\nHTTP Request: Send request\nHTTP Response: Receive response\nConnection Close/Keep-Alive: Close or reuse connection\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/anything\nX-Custom-Header: debug-mode\nUser-Agent: Testing-Client/1.0\n\n\n\n\nGET https://httpbin.io/anything\n\n\n\n\n\n\n\nGET https://httpbin.io/delay/3\n\n\n\n\nGET https://httpbin.io/status/418\n\n\n\n\n\nEnable compression (gzip/brotli)\nUse caching appropriately\nImplement HTTP/2 or HTTP/3\nUse connection keep-alive\nMinimize header size\nUse range requests for large files\n\n\n\n\nAlways use HTTPS\nImplement CORS correctly\nAdd security headers\nValidate inputs\nRate limit requests\nUse proper authentication\n\n\n\n\n\n\nHandle redirects\nImplement retries with backoff\nSet appropriate timeouts\nHandle rate limits gracefully\nValidate responses\nLog errors properly\n\n\n\n\nTry these on your own:\n\nSend a CORS preflight request and examine the response\nMake a conditional request using ETag\nRequest compressed content and verify the encoding\nTest range requests with different byte ranges\nFollow a redirect chain and observe each step\nSimulate rate limiting and check Retry-After header\n\n\nCORS: Controls cross-origin requests, requires proper headers\nCaching: Improves performance with Cache-Control, ETag, and conditional requests\nCompression: Reduces bandwidth with gzip, deflate, or brotli\nRange Requests: Enable partial content and resume capabilities\nHTTP/2: Provides multiplexing, header compression, and server push\nSecurity: Use HTTPS, CORS, security headers, and rate limiting\nModern APIs: Implement webhooks, SSE, and proper error handling\n\nYou’ve now completed the HTTP Fundamentals training! You’ve learned:\n\nHTTP Basics: Protocol fundamentals and request/response cycle\nHTTP Methods: GET, POST, PUT, PATCH, DELETE, and their semantics\nHTTP Headers: Controlling behavior with request and response headers\nStatus Codes: Understanding and using 1xx through 5xx responses\nBodies: Working with JSON, form data, and other content types\nAuthentication: Securing APIs with Basic, Bearer, and other methods\nAdvanced Topics: CORS, caching, compression, and modern HTTP features\n\n\nREST API Design: Design principles and best practices\nGraphQL: Alternative to REST for flexible queries\nWebSockets: Full-duplex communication\ngRPC: High-performance RPC framework\nAPI Documentation: OpenAPI/Swagger specifications\nLoad Testing: Performance testing with tools like k6 or Locust\nAPI Gateways: Kong, Nginx, AWS API Gateway\nMDN HTTP Documentation\nRFC 7230-7237: HTTP/1.1 Specification\nRFC 7540: HTTP/2 Specification\nhttpbin.io: HTTP testing service\nHurl Documentation: Hurl testing tool\n\nThank you for completing this HTTP Fundamentals training! You now have a solid foundation for working with HTTP in your development projects.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Semantics and Encoding\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 8.4: Content Encoding\nSection 8.6: Content Negotiation\nSection 14: Range Requests\nSection 14.1: Range\nSection 14.2: Accept-Ranges\nSection 17.2: Redirection 3xx\n\n\n\n\n\nRFC 9111 - HTTP Caching\n\nSection 3: Storing Responses in Caches\nSection 4: Constructing Responses from Caches\nSection 5.2: Cache-Control\nSection 8: Invalidation\n\n\n\n\n\n\nRFC 9113 - HTTP/2\n\nSection 5: Streams and Multiplexing\nSection 8: HTTP Message Exchanges\n\nRFC 9114 - HTTP/3\nRFC 9000 - QUIC: A UDP-Based Multiplexed and Secure Transport\n\n\n\n\n\nFetch Standard - CORS Protocol (WHATWG)\nRFC 9209 - The Proxy-Status HTTP Response Header Field\nRFC 7694 - HTTP Client-Initiated Content Encoding",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#cors-cross-origin-resource-sharing",
    "href": "chapters/07-advanced.html#cors-cross-origin-resource-sharing",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Browsers enforce the Same-Origin Policy for security: - https://example.com cannot access https://api.other.com by default - CORS headers explicitly allow cross-origin requests\n\n\n\n\n\ngraph TD\n    A[Browser loads page from&lt;br/&gt;example.com] --&gt; B[JavaScript tries to&lt;br/&gt;fetch api.other.com]\n    B --&gt; C{Same Origin?}\n\n    C --&gt;|Yes&lt;br/&gt;same domain| D[Request allowed ✓]\n    C --&gt;|No&lt;br/&gt;different domain| E{CORS headers present?}\n\n    E --&gt;|Yes&lt;br/&gt;Access-Control-Allow-Origin| F[Request allowed ✓]\n    E --&gt;|No| G[Request blocked ✗&lt;br/&gt;CORS error]\n\n    style D fill:#c8e6c9\n    style F fill:#c8e6c9\n    style G fill:#ffccbc\n\n\n\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nOrigin: https://example.com\nThe server responds with CORS headers: - Access-Control-Allow-Origin: Which origins are allowed - Access-Control-Allow-Methods: Which HTTP methods are allowed - Access-Control-Allow-Headers: Which headers are allowed\n\n\n\nFor complex requests (POST with JSON, custom headers), browsers send an OPTIONS request first:\n\n\n\nOPTIONS https://httpbin.io/post\nOrigin: https://example.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type, Authorization\n\n\n\n\n\n\nGET https://httpbin.io/get\nOrigin: https://myapp.com\nLook for these headers in the response:\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Max-Age: 86400",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#cors-with-credentials",
    "href": "chapters/07-advanced.html#cors-with-credentials",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nOrigin: https://example.com\nCookie: session=abc123\nWhen sending credentials (cookies, auth headers), the server must respond with:\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Credentials: true\nNote: Cannot use Access-Control-Allow-Origin: * with credentials.\n\n\nAllowing all origins (permissive):\nAccess-Control-Allow-Origin: *\nAllowing specific origin:\nAccess-Control-Allow-Origin: https://trusted-app.com\nAllowing multiple origins: Server must check the Origin header and respond dynamically.\nCaching improves performance by storing and reusing previous responses.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#http-caching",
    "href": "chapters/07-advanced.html#http-caching",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "sequenceDiagram\n    participant Client\n    participant Cache\n    participant Server\n\n    Client-&gt;&gt;Server: GET /data\n    Server-&gt;&gt;Client: 200 OK&lt;br/&gt;Cache-Control: max-age=3600&lt;br/&gt;Data\n\n    Note over Client,Cache: Resource cached for 1 hour\n\n    Client-&gt;&gt;Cache: GET /data (within 1 hour)\n    Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;Data (from cache)\n\n    Note over Client,Cache: Fast! No server roundtrip\n\n    Client-&gt;&gt;Cache: GET /data (after 1 hour)\n    Cache-&gt;&gt;Server: GET /data&lt;br/&gt;If-None-Match: \"etag123\"\n\n    alt Not Modified\n        Server-&gt;&gt;Cache: 304 Not Modified\n        Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;Data (from cache)\n    else Modified\n        Server-&gt;&gt;Cache: 200 OK&lt;br/&gt;New Data\n        Cache-&gt;&gt;Client: 200 OK&lt;br/&gt;New Data\n    end\n\n\n\n\n\n\n\n\n\n\n\nGET https://httpbin.io/cache\nCache-Control: max-age=3600",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#cache-control-directives",
    "href": "chapters/07-advanced.html#cache-control-directives",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Request Directives: - no-cache: Validate with server before using cache - no-store: Don’t cache at all - max-age=N: Use cached version if less than N seconds old - max-stale=N: Accept stale responses up to N seconds - min-fresh=N: Require response to be fresh for at least N seconds\nResponse Directives: - public: Cacheable by any cache (CDN, browser) - private: Only cacheable by browser - no-cache: Must revalidate before using - no-store: Don’t cache anywhere - max-age=N: Fresh for N seconds - s-maxage=N: Fresh for N seconds in shared caches - must-revalidate: Must validate when stale\n\n\n\n\n\n\nGET https://httpbin.io/get\nCache-Control: no-store\n\n\n\n\nGET https://httpbin.io/cache/3600\nCache-Control: private, max-age=3600\n\n\n\n\nGET https://httpbin.io/cache\nCache-Control: public, max-age=3600, s-maxage=86400\n\n\n\nETags enable efficient cache validation:\n\n\n\n\nGET https://httpbin.io/etag/abc123def456\n\n\n\n\nGET https://httpbin.io/etag/abc123def456\nIf-None-Match: \"abc123def456\"\nIf unchanged, server returns 304 Not Modified with no body, saving bandwidth.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#last-modified-and-if-modified-since",
    "href": "chapters/07-advanced.html#last-modified-and-if-modified-since",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/response-headers?Last-Modified=Mon,%2027%20Oct%202024%2015:30:00%20GMT\n\n\n\n\nGET https://httpbin.io/response-headers?Last-Modified=Mon,%2027%20Oct%202024%2015:30:00%20GMT\nIf-Modified-Since: Mon, 27 Oct 2024 15:30:00 GMT\n\n\nTells caches which request headers affect the response:\n\n%%include\nGET https://httpbin.io/response-headers?Vary=Accept-Encoding,%20Accept-Language\nAccept-Encoding: gzip\nAccept-Language: en-US\n[Options]\ncompressed: true\nThe cache must store separate versions for different combinations of these headers.\nCompression reduces bandwidth and improves performance.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#compression",
    "href": "chapters/07-advanced.html#compression",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%include\nGET https://httpbin.io/gzip\nAccept-Encoding: gzip\n[Options]\ncompressed: true\nResponse includes: Content-Encoding: gzip\n\n\n\n%%include\nGET https://httpbin.io/deflate\nAccept-Encoding: deflate\n[Options]\ncompressed: true\n\n\n\n%%include\nGET https://httpbin.io/brotli\nAccept-Encoding: br\n[Options]\ncompressed: true\nBrotli typically provides better compression than gzip.\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept-Encoding: br, gzip, deflate\nServer chooses the best supported algorithm.\n\n\n\nCompress: - Text content (HTML, CSS, JavaScript, JSON, XML) - Large responses - API responses\nDon’t Compress: - Already compressed (images, videos, PDFs) - Very small responses (overhead not worth it) - Streaming data that needs immediate access\nClients and servers negotiate the best content format.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#content-negotiation",
    "href": "chapters/07-advanced.html#content-negotiation",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nAccept: application/json, application/xml;q=0.9, text/plain;q=0.8\nQuality values (q) indicate preference (0.0 to 1.0, default 1.0).",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#accept-language",
    "href": "chapters/07-advanced.html#accept-language",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nAccept-Language: fr-FR, en-US;q=0.9, en;q=0.8",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#accept-charset",
    "href": "chapters/07-advanced.html#accept-charset",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nAccept-Charset: utf-8, iso-8859-1;q=0.7",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#accept-encoding",
    "href": "chapters/07-advanced.html#accept-encoding",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Already covered in compression section.\n\n\n\n\n\nGET https://httpbin.io/get\nAccept: application/json;q=1.0, application/xml;q=0.8\nAccept-Language: en-US, fr;q=0.8\nAccept-Encoding: br, gzip\nAccept-Charset: utf-8\nRequest partial content, useful for resuming downloads or streaming.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#range-requests",
    "href": "chapters/07-advanced.html#range-requests",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%verbose\n%%output=request-range.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\nServer responds with 206 Partial Content and Content-Range header.\n\n\n\n%%verbose\n%%output=request-range2.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-99, 200-299, 400-499",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#resume-download",
    "href": "chapters/07-advanced.html#resume-download",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%verbose\n%%output=request-range3.bin\nGET https://httpbin.io/range/1000\nRange: bytes=0-499\n%%verbose\n%%output=request-range4.bin\nGET https://httpbin.io/range/1000\nRange: bytes=500-999\n\n\nIndicates server supports range requests:\n\n%%include\nHEAD https://httpbin.io/range/1000\nLook for Accept-Ranges: bytes in response.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#persistent-connections",
    "href": "chapters/07-advanced.html#persistent-connections",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nConnection: keep-alive\nReuses the TCP connection for multiple requests (default in HTTP/1.1).",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#connection-close",
    "href": "chapters/07-advanced.html#connection-close",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nConnection: close\nCloses connection after this request.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#keep-alive-settings",
    "href": "chapters/07-advanced.html#keep-alive-settings",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/get\nConnection: keep-alive\nKeep-Alive: timeout=5, max=100\n\ntimeout=5: Keep connection open for 5 seconds\nmax=100: Allow 100 requests on this connection\n\nHTTP/2 brings significant improvements over HTTP/1.1:",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#http2-features",
    "href": "chapters/07-advanced.html#http2-features",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "graph TD\n    A[HTTP/2 Improvements] --&gt; B[Multiplexing]\n    A --&gt; C[Server Push]\n    A --&gt; D[Header Compression]\n    A --&gt; E[Binary Protocol]\n    A --&gt; F[Stream Priority]\n\n    B --&gt; B1[Multiple requests&lt;br/&gt;on single connection]\n    C --&gt; C1[Server sends resources&lt;br/&gt;before requested]\n    D --&gt; D1[HPACK compression&lt;br/&gt;reduces overhead]\n    E --&gt; E1[Binary framing&lt;br/&gt;faster parsing]\n    F --&gt; F1[Prioritize critical&lt;br/&gt;resources]\n\n    style A fill:#e1f5ff\n    style B fill:#c8e6c9\n    style C fill:#c8e6c9\n    style D fill:#c8e6c9\n    style E fill:#c8e6c9\n    style F fill:#c8e6c9\n\n\n\n\n\n\n\n\nMultiple requests/responses on single connection simultaneously.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#server-push",
    "href": "chapters/07-advanced.html#server-push",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Server can proactively send resources to client.\n\n\nHPACK compression reduces header overhead.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#binary-protocol",
    "href": "chapters/07-advanced.html#binary-protocol",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "More efficient parsing than text-based HTTP/1.1.\n\n\nClients can prioritize important resources.\n\n\n\n\n%%include\nGET https://httpbin.io/get\nCheck response protocol in output - may show HTTP/2 if supported.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#http3-and-quic",
    "href": "chapters/07-advanced.html#http3-and-quic",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "HTTP/3 uses QUIC (over UDP) instead of TCP:\n\nFaster connection establishment\nBetter handling of packet loss\nImproved performance on mobile networks",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#permanent-redirect",
    "href": "chapters/07-advanced.html#permanent-redirect",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%include\n\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=301",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#temporary-redirect",
    "href": "chapters/07-advanced.html#temporary-redirect",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%include\n\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=302",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#temporary-method-preserved",
    "href": "chapters/07-advanced.html#temporary-method-preserved",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "%%include\nGET https://httpbin.io/redirect-to?url=https://httpbin.io/get&status_code=307\n\n\n\n\n\n\nGET https://httpbin.io/redirect/3\nThis redirects 3 times before returning final response.\n\n\n\n\n\n\n\nGET https://httpbin.io/absolute-redirect/1\n\n\n\n\nGET https://httpbin.io/relative-redirect/1",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#rate-limiting",
    "href": "chapters/07-advanced.html#rate-limiting",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "APIs implement rate limiting to prevent abuse.\n\n\n\n\n\nGET https://httpbin.io/get\nLook for headers like:\nX-RateLimit-Limit: 5000\nX-RateLimit-Remaining: 4999\nX-RateLimit-Reset: 1640995200",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#rate-limit-exceeded",
    "href": "chapters/07-advanced.html#rate-limit-exceeded",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/status/429\nResponse includes Retry-After header indicating when to retry.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#timeouts",
    "href": "chapters/07-advanced.html#timeouts",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/delay/2\nThis delays response by 2 seconds.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#security-headers",
    "href": "chapters/07-advanced.html#security-headers",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/response-headers?Strict-Transport-Security=max-age=31536000&X-Content-Type-Options=nosniff&X-Frame-Options=DENY\nImportant security headers: - Strict-Transport-Security: Force HTTPS - X-Content-Type-Options: nosniff: Prevent MIME sniffing - X-Frame-Options: DENY: Prevent clickjacking - Content-Security-Policy: Control resource loading - X-XSS-Protection: Enable XSS filter (legacy)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#webhooks-and-server-push",
    "href": "chapters/07-advanced.html#webhooks-and-server-push",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Webhooks allow servers to push data to clients.\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nX-Webhook-Signature: sha256=abc123def456\n\n{\n  \"event\": \"user.created\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"data\": {\n    \"user_id\": 123,\n    \"email\": \"newuser@example.com\"\n  }\n}\n\n\n\nClient repeatedly requests updates until new data is available.\n\n\n\n\nGET https://httpbin.io/delay/5\nServer holds connection open until data is available or timeout.\n\n\n\nOne-way streaming from server to client.\n\n\n\nGET https://httpbin.io/stream/5\nAccept: text/event-stream",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#http-request-lifecycle",
    "href": "chapters/07-advanced.html#http-request-lifecycle",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Complete lifecycle of an HTTP request:\n\nDNS Resolution: Resolve hostname to IP\nTCP Connection: Three-way handshake\nTLS Handshake: (HTTPS only) Establish encryption\nHTTP Request: Send request\nHTTP Response: Receive response\nConnection Close/Keep-Alive: Close or reuse connection",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#http-debugging",
    "href": "chapters/07-advanced.html#http-debugging",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/anything\nX-Custom-Header: debug-mode\nUser-Agent: Testing-Client/1.0\n\n\n\n\nGET https://httpbin.io/anything",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#simulate-delays",
    "href": "chapters/07-advanced.html#simulate-delays",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "GET https://httpbin.io/delay/3\n\n\n\n\nGET https://httpbin.io/status/418",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#performance",
    "href": "chapters/07-advanced.html#performance",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Enable compression (gzip/brotli)\nUse caching appropriately\nImplement HTTP/2 or HTTP/3\nUse connection keep-alive\nMinimize header size\nUse range requests for large files\n\n\n\n\nAlways use HTTPS\nImplement CORS correctly\nAdd security headers\nValidate inputs\nRate limit requests\nUse proper authentication",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#reliability",
    "href": "chapters/07-advanced.html#reliability",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Handle redirects\nImplement retries with backoff\nSet appropriate timeouts\nHandle rate limits gracefully\nValidate responses\nLog errors properly",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#practice-exercises",
    "href": "chapters/07-advanced.html#practice-exercises",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "Try these on your own:\n\nSend a CORS preflight request and examine the response\nMake a conditional request using ETag\nRequest compressed content and verify the encoding\nTest range requests with different byte ranges\nFollow a redirect chain and observe each step\nSimulate rate limiting and check Retry-After header\n\n\nCORS: Controls cross-origin requests, requires proper headers\nCaching: Improves performance with Cache-Control, ETag, and conditional requests\nCompression: Reduces bandwidth with gzip, deflate, or brotli\nRange Requests: Enable partial content and resume capabilities\nHTTP/2: Provides multiplexing, header compression, and server push\nSecurity: Use HTTPS, CORS, security headers, and rate limiting\nModern APIs: Implement webhooks, SSE, and proper error handling\n\nYou’ve now completed the HTTP Fundamentals training! You’ve learned:\n\nHTTP Basics: Protocol fundamentals and request/response cycle\nHTTP Methods: GET, POST, PUT, PATCH, DELETE, and their semantics\nHTTP Headers: Controlling behavior with request and response headers\nStatus Codes: Understanding and using 1xx through 5xx responses\nBodies: Working with JSON, form data, and other content types\nAuthentication: Securing APIs with Basic, Bearer, and other methods\nAdvanced Topics: CORS, caching, compression, and modern HTTP features\n\n\nREST API Design: Design principles and best practices\nGraphQL: Alternative to REST for flexible queries\nWebSockets: Full-duplex communication\ngRPC: High-performance RPC framework\nAPI Documentation: OpenAPI/Swagger specifications\nLoad Testing: Performance testing with tools like k6 or Locust\nAPI Gateways: Kong, Nginx, AWS API Gateway\nMDN HTTP Documentation\nRFC 7230-7237: HTTP/1.1 Specification\nRFC 7540: HTTP/2 Specification\nhttpbin.io: HTTP testing service\nHurl Documentation: Hurl testing tool\n\nThank you for completing this HTTP Fundamentals training! You now have a solid foundation for working with HTTP in your development projects.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/07-advanced.html#rfc-references",
    "href": "chapters/07-advanced.html#rfc-references",
    "title": "Chapter 7: Advanced Topics",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Semantics and Encoding\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 8.4: Content Encoding\nSection 8.6: Content Negotiation\nSection 14: Range Requests\nSection 14.1: Range\nSection 14.2: Accept-Ranges\nSection 17.2: Redirection 3xx\n\n\n\n\n\nRFC 9111 - HTTP Caching\n\nSection 3: Storing Responses in Caches\nSection 4: Constructing Responses from Caches\nSection 5.2: Cache-Control\nSection 8: Invalidation\n\n\n\n\n\n\nRFC 9113 - HTTP/2\n\nSection 5: Streams and Multiplexing\nSection 8: HTTP Message Exchanges\n\nRFC 9114 - HTTP/3\nRFC 9000 - QUIC: A UDP-Based Multiplexed and Secure Transport\n\n\n\n\n\nFetch Standard - CORS Protocol (WHATWG)\nRFC 9209 - The Proxy-Status HTTP Response Header Field\nRFC 7694 - HTTP Client-Initiated Content Encoding",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "7. Advanced Topics"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html",
    "href": "chapters/05-request-response.html",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "The HTTP body contains the actual data being sent between client and server. Not all requests and responses have bodies, but when they do, the Content-Type header specifies the format.\n\n\n\n\n\nMethod\nRequest Body\nResponse Body\n\n\n\n\nGET\nNo\nYes\n\n\nPOST\nYes\nYes\n\n\nPUT\nYes\nYes\n\n\nPATCH\nYes\nYes\n\n\nDELETE\nRare\nOptional\n\n\nHEAD\nNo\nNo\n\n\nOPTIONS\nOptional\nYes\n\n\n\n\n\n\nThe Content-Type header specifies the media type of the body:\nContent-Type: type/subtype; parameter=value\nExamples: - application/json - text/html; charset=utf-8 - multipart/form-data; boundary=----WebKitFormBoundary\n\n\n\nJSON is the most common format for modern APIs.\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"age\": 30\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"user\": {\n    \"id\": 123,\n    \"name\": \"Bob\",\n    \"profile\": {\n      \"bio\": \"Developer\",\n      \"location\": \"Paris\"\n    }\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en\"\n  }\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"users\": [\n    {\"id\": 1, \"name\": \"Alice\"},\n    {\"id\": 2, \"name\": \"Bob\"},\n    {\"id\": 3, \"name\": \"Charlie\"}\n  ],\n  \"tags\": [\"http\", \"training\", \"api\"]\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"string\": \"text value\",\n  \"number\": 42,\n  \"float\": 3.14,\n  \"boolean\": true,\n  \"null_value\": null,\n  \"array\": [1, 2, 3],\n  \"object\": {\"nested\": \"value\"}\n}\n\n\n\n\n\n\nGET https://httpbin.io/json\nAccept: application/json\n\n\n\n\nTraditional HTML form submission format.\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: alice\npassword: secret123\nremember: true\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nname: Alice Smith\nemail: alice+test@example.com\nmessage: Hello World!\nHurl automatically URL-encodes special characters in form parameters.\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: admin\npassword: P@ssw0rd!\naction: login\nredirect: /dashboard\n\n\n\n\nUsed for file uploads and forms with mixed content types.\n\n\n\n\n\nPOST https://httpbin.io/post\n[MultipartFormData]\nusername: alice\nemail: alice@example.com\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[MultipartFormData]\ndescription: My profile picture\nNote: Hurl can upload actual files using file,&lt;filepath&gt; syntax, but for this example we’re just sending text data.\n\n\n\n\nSimple unformatted text.\nPOST https://httpbin.io/post\nContent-Type: text/plain\n\n```\nThis is plain text content.\nIt can span multiple lines.\nNo special formatting or structure.\n```\n\n\n\n\n\nGET https://httpbin.io/html\nAccept: text/html\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;user&gt;\n  &lt;id&gt;123&lt;/id&gt;\n  &lt;name&gt;Alice&lt;/name&gt;\n  &lt;email&gt;alice@example.com&lt;/email&gt;\n  &lt;roles&gt;\n    &lt;role&gt;admin&lt;/role&gt;\n    &lt;role&gt;user&lt;/role&gt;\n  &lt;/roles&gt;\n&lt;/user&gt;\n\n\n\n\nFor raw binary data:\n\nPOST https://httpbin.io/post\nContent-Type: application/octet-stream\n\n```\nRaw binary data here...\n```\n\n\n%%verbose\n%%output=bytes.bin\nGET https://httpbin.io/bytes/100\n\n\n\n\n\n\n%%verbose\n%%output=tmpjgfdslkf.jpeg\nGET https://httpbin.io/image/jpeg\nAccept: image/jpeg\n\n\n\n\n\n\n\n\nGET https://httpbin.io/get\nAccept: application/json\n\nGET https://httpbin.io/get\nAccept: application/json, application/xml;q=0.9, text/plain;q=0.8\nThis says: 1. Prefer JSON (quality 1.0, default) 2. XML is acceptable (quality 0.9) 3. Plain text is least preferred (quality 0.8)\n\n\n\n\nFor streaming or unknown content length:\n\n\n\nPOST https://httpbin.io/post\nTransfer-Encoding: chunked\nContent-Type: text/plain\n\n```\nThis is chunked data...\n```\n\n\n\nGET https://httpbin.io/stream/5\nThis returns 5 JSON objects as a stream.\n\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"valid\": \"json\",\n  \"properly\": \"formatted\"\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nContent-Length: 45\n\n{\n  \"message\": \"Body with explicit length\"\n}\n\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"action\": \"create\",\n  \"data\": {\n    \"name\": \"New Resource\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/status/204\nStatus 204 typically has no body.\n\n\n\n\n\n\n{\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n  },\n  \"meta\": {\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"version\": \"1.0\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/get?page=2&per_page=20\nTypical pagination response structure:\n{\n  \"data\": [...],\n  \"pagination\": {\n    \"page\": 2,\n    \"per_page\": 20,\n    \"total\": 100,\n    \"total_pages\": 5\n  }\n}\n\n\n\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"error\": \"Invalid format\"\n      }\n    ]\n  }\n}\n\n\n\n\n\n\n\nUse JSON for APIs: Modern standard, widely supported\nSet Content-Type: Always specify the content type\nValidate before sending: Ensure valid format\nKeep reasonable size: Don’t send huge payloads\nUse compression: Enable gzip for large bodies\n\n\n\n\n\nConsistent format: Use the same structure across endpoints\nInclude metadata: Timestamps, versions, pagination\nMeaningful errors: Provide detailed error information\nProper status codes: Match body content with status code\nUse compression: Reduce bandwidth with gzip/brotli\n\n\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/anything\nContent-Type: application/json\n\n{\n  \"test\": \"json\",\n  \"number\": 123\n}\n\n\n\nPOST https://httpbin.io/anything\n[FormParams]\ntest: form\nnumber: 456\n\n\n\nPOST https://httpbin.io/anything\nContent-Type: text/plain\n\n```\nPlain text content\n```\n\n\n\nNotice how httpbin.io shows different parsing in json, form, and data fields based on Content-Type.\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"sending\": \"json\",\n  \"expecting\": \"json back\"\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json; charset=utf-8\n\n{\n  \"message\": \"Hello World! 你好世界! Bonjour le monde!\"\n}\nTry these on your own:\n\nSend a deeply nested JSON object (3+ levels)\nSend form data with special characters (properly encoded)\nRequest compressed content and verify the Content-Encoding\nSend the same data as JSON and form data - compare responses\nUse Accept header with multiple types and priorities\n\n\nContent-Type: Specifies the format of the request/response body\nJSON: Most common format for modern APIs\nForm data: Two types - urlencoded (simple) and multipart (with files)\nAccept header: Tells server what format you want\nCompression: Use Accept-Encoding to reduce bandwidth\nValidation: Always validate content format matches Content-Type\nConsistency: Maintain consistent response structure across API\n\nNow that you understand request and response bodies, let’s explore how to secure HTTP requests in Chapter 6: Authentication.\n\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteMessage Bodies and Representations\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 6.4: Message Body\nSection 8: Representations\nSection 8.3: Content-Type\nSection 8.4: Content Encoding\nSection 8.5: Content-Length\n\n\n\n\n\nRFC 9112 - HTTP/1.1\n\nSection 6: Message Body\nSection 7.1: Chunked Transfer Encoding\n\n\n\n\n\n\nRFC 8259 - JSON Data Interchange Format\nRFC 7578 - Multipart Form Data\nRFC 4648 - Base64 Encoding",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#body-usage-by-method",
    "href": "chapters/05-request-response.html#body-usage-by-method",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "Method\nRequest Body\nResponse Body\n\n\n\n\nGET\nNo\nYes\n\n\nPOST\nYes\nYes\n\n\nPUT\nYes\nYes\n\n\nPATCH\nYes\nYes\n\n\nDELETE\nRare\nOptional\n\n\nHEAD\nNo\nNo\n\n\nOPTIONS\nOptional\nYes",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#content-type-header",
    "href": "chapters/05-request-response.html#content-type-header",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "The Content-Type header specifies the media type of the body:\nContent-Type: type/subtype; parameter=value\nExamples: - application/json - text/html; charset=utf-8 - multipart/form-data; boundary=----WebKitFormBoundary",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#json-applicationjson",
    "href": "chapters/05-request-response.html#json-applicationjson",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "JSON is the most common format for modern APIs.\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"age\": 30\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"user\": {\n    \"id\": 123,\n    \"name\": \"Bob\",\n    \"profile\": {\n      \"bio\": \"Developer\",\n      \"location\": \"Paris\"\n    }\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en\"\n  }\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"users\": [\n    {\"id\": 1, \"name\": \"Alice\"},\n    {\"id\": 2, \"name\": \"Bob\"},\n    {\"id\": 3, \"name\": \"Charlie\"}\n  ],\n  \"tags\": [\"http\", \"training\", \"api\"]\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"string\": \"text value\",\n  \"number\": 42,\n  \"float\": 3.14,\n  \"boolean\": true,\n  \"null_value\": null,\n  \"array\": [1, 2, 3],\n  \"object\": {\"nested\": \"value\"}\n}\n\n\n\n\n\n\nGET https://httpbin.io/json\nAccept: application/json",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#form-data",
    "href": "chapters/05-request-response.html#form-data",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "Traditional HTML form submission format.\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: alice\npassword: secret123\nremember: true\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nname: Alice Smith\nemail: alice+test@example.com\nmessage: Hello World!\nHurl automatically URL-encodes special characters in form parameters.\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: admin\npassword: P@ssw0rd!\naction: login\nredirect: /dashboard",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#multipart-form-data",
    "href": "chapters/05-request-response.html#multipart-form-data",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "Used for file uploads and forms with mixed content types.\n\n\n\n\n\nPOST https://httpbin.io/post\n[MultipartFormData]\nusername: alice\nemail: alice@example.com\n\n\n\n\n\n\nPOST https://httpbin.io/post\n[MultipartFormData]\ndescription: My profile picture\nNote: Hurl can upload actual files using file,&lt;filepath&gt; syntax, but for this example we’re just sending text data.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#plain-text",
    "href": "chapters/05-request-response.html#plain-text",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "Simple unformatted text.\nPOST https://httpbin.io/post\nContent-Type: text/plain\n\n```\nThis is plain text content.\nIt can span multiple lines.\nNo special formatting or structure.\n```\n\n\n\n\n\nGET https://httpbin.io/html\nAccept: text/html\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;user&gt;\n  &lt;id&gt;123&lt;/id&gt;\n  &lt;name&gt;Alice&lt;/name&gt;\n  &lt;email&gt;alice@example.com&lt;/email&gt;\n  &lt;roles&gt;\n    &lt;role&gt;admin&lt;/role&gt;\n    &lt;role&gt;user&lt;/role&gt;\n  &lt;/roles&gt;\n&lt;/user&gt;",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#binary-data",
    "href": "chapters/05-request-response.html#binary-data",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "For raw binary data:\n\nPOST https://httpbin.io/post\nContent-Type: application/octet-stream\n\n```\nRaw binary data here...\n```\n\n\n%%verbose\n%%output=bytes.bin\nGET https://httpbin.io/bytes/100",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#images",
    "href": "chapters/05-request-response.html#images",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "%%verbose\n%%output=tmpjgfdslkf.jpeg\nGET https://httpbin.io/image/jpeg\nAccept: image/jpeg",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#content-negotiation",
    "href": "chapters/05-request-response.html#content-negotiation",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "GET https://httpbin.io/get\nAccept: application/json\n\nGET https://httpbin.io/get\nAccept: application/json, application/xml;q=0.9, text/plain;q=0.8\nThis says: 1. Prefer JSON (quality 1.0, default) 2. XML is acceptable (quality 0.9) 3. Plain text is least preferred (quality 0.8)",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#transfer-encoding",
    "href": "chapters/05-request-response.html#transfer-encoding",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "For streaming or unknown content length:\n\n\n\nPOST https://httpbin.io/post\nTransfer-Encoding: chunked\nContent-Type: text/plain\n\n```\nThis is chunked data...\n```\n\n\n\nGET https://httpbin.io/stream/5\nThis returns 5 JSON objects as a stream.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#request-body-best-practices",
    "href": "chapters/05-request-response.html#request-body-best-practices",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "POST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"valid\": \"json\",\n  \"properly\": \"formatted\"\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nContent-Length: 45\n\n{\n  \"message\": \"Body with explicit length\"\n}",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#response-body-patterns",
    "href": "chapters/05-request-response.html#response-body-patterns",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "POST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"action\": \"create\",\n  \"data\": {\n    \"name\": \"New Resource\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/status/204\nStatus 204 typically has no body.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#common-response-structures",
    "href": "chapters/05-request-response.html#common-response-structures",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "{\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n  },\n  \"meta\": {\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"version\": \"1.0\"\n  }\n}\n\n\n\n\n\n\nGET https://httpbin.io/get?page=2&per_page=20\nTypical pagination response structure:\n{\n  \"data\": [...],\n  \"pagination\": {\n    \"page\": 2,\n    \"per_page\": 20,\n    \"total\": 100,\n    \"total_pages\": 5\n  }\n}\n\n\n\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"error\": \"Invalid format\"\n      }\n    ]\n  }\n}",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#best-practices",
    "href": "chapters/05-request-response.html#best-practices",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "Use JSON for APIs: Modern standard, widely supported\nSet Content-Type: Always specify the content type\nValidate before sending: Ensure valid format\nKeep reasonable size: Don’t send huge payloads\nUse compression: Enable gzip for large bodies\n\n\n\n\n\nConsistent format: Use the same structure across endpoints\nInclude metadata: Timestamps, versions, pagination\nMeaningful errors: Provide detailed error information\nProper status codes: Match body content with status code\nUse compression: Reduce bandwidth with gzip/brotli",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#comparison-examples",
    "href": "chapters/05-request-response.html#comparison-examples",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "POST https://httpbin.io/anything\nContent-Type: application/json\n\n{\n  \"test\": \"json\",\n  \"number\": 123\n}\n\n\n\nPOST https://httpbin.io/anything\n[FormParams]\ntest: form\nnumber: 456\n\n\n\nPOST https://httpbin.io/anything\nContent-Type: text/plain\n\n```\nPlain text content\n```\n\n\n\nNotice how httpbin.io shows different parsing in json, form, and data fields based on Content-Type.\n\n\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"sending\": \"json\",\n  \"expecting\": \"json back\"\n}\n\n\n\n\n\n\nPOST https://httpbin.io/post\nContent-Type: application/json; charset=utf-8\n\n{\n  \"message\": \"Hello World! 你好世界! Bonjour le monde!\"\n}\nTry these on your own:\n\nSend a deeply nested JSON object (3+ levels)\nSend form data with special characters (properly encoded)\nRequest compressed content and verify the Content-Encoding\nSend the same data as JSON and form data - compare responses\nUse Accept header with multiple types and priorities\n\n\nContent-Type: Specifies the format of the request/response body\nJSON: Most common format for modern APIs\nForm data: Two types - urlencoded (simple) and multipart (with files)\nAccept header: Tells server what format you want\nCompression: Use Accept-Encoding to reduce bandwidth\nValidation: Always validate content format matches Content-Type\nConsistency: Maintain consistent response structure across API\n\nNow that you understand request and response bodies, let’s explore how to secure HTTP requests in Chapter 6: Authentication.",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/05-request-response.html#rfc-references",
    "href": "chapters/05-request-response.html#rfc-references",
    "title": "Chapter 5: Request & Response Bodies",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteMessage Bodies and Representations\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 6.4: Message Body\nSection 8: Representations\nSection 8.3: Content-Type\nSection 8.4: Content Encoding\nSection 8.5: Content-Length\n\n\n\n\n\nRFC 9112 - HTTP/1.1\n\nSection 6: Message Body\nSection 7.1: Chunked Transfer Encoding\n\n\n\n\n\n\nRFC 8259 - JSON Data Interchange Format\nRFC 7578 - Multipart Form Data\nRFC 4648 - Base64 Encoding",
    "crumbs": [
      "Home",
      "Working with HTTP",
      "5. Request & Response"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html",
    "href": "chapters/02-http-methods.html",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "HTTP methods (also called verbs) define the action to be performed on a resource. Each method has specific semantics and use cases.\n\n\n\n\n\nMethod\nPurpose\nSafe\nIdempotent\nHas Body\n\n\n\n\nGET\nRetrieve resource\nYes\nYes\nNo\n\n\nPOST\nCreate resource\nNo\nNo\nYes\n\n\nPUT\nReplace resource\nNo\nYes\nYes\n\n\nPATCH\nModify resource\nNo\nNo\nYes\n\n\nDELETE\nRemove resource\nNo\nYes\nNo\n\n\nHEAD\nGet headers only\nYes\nYes\nNo\n\n\nOPTIONS\nGet allowed methods\nYes\nYes\nNo\n\n\n\n\n\n\n\n\ngraph TD\n    A[HTTP Methods] --&gt; B[Safe Methods]\n    A --&gt; C[Unsafe Methods]\n\n    B --&gt; D[GET]\n    B --&gt; E[HEAD]\n    B --&gt; F[OPTIONS]\n\n    C --&gt; G[POST]\n    C --&gt; H[PUT]\n    C --&gt; I[PATCH]\n    C --&gt; J[DELETE]\n\n    K[Idempotent] --&gt; D\n    K --&gt; E\n    K --&gt; F\n    K --&gt; H\n    K --&gt; J\n\n    L[Not Idempotent] --&gt; G\n    L --&gt; I\n\n    style B fill:#c8e6c9\n    style C fill:#ffccbc\n    style K fill:#bbdefb\n    style L fill:#fff9c4\n\n\n\n\n\n\n\n\n\nSafe: The method doesn’t modify server state\nIdempotent: Multiple identical requests have the same effect as a single request\nHas Body: Whether the request can include a message body\n\n\n\n\n\nGET retrieves data from the server. It should not modify any resources.\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?user=alice&role=admin&status=active\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/anything/users/123\n\n\n\n\nSafe: Reading data doesn’t change it\nIdempotent: Calling GET 100 times returns the same result (assuming no external changes)\n\n\n\n\n\nPOST submits data to create a new resource. It’s commonly used for form submissions and API calls.\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"role\": \"developer\"\n}\n\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: alice\npassword: secret123\nremember: true\n\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"user\": {\n    \"name\": \"Bob\",\n    \"age\": 30\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"notifications\": true\n  },\n  \"tags\": [\"developer\", \"python\", \"http\"]\n}\n\n\n\nCalling POST multiple times creates multiple resources:\nPOST /users → Creates user (ID: 1)\nPOST /users → Creates user (ID: 2)\nPOST /users → Creates user (ID: 3)\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n    participant DB as Database\n\n    Client-&gt;&gt;Server: POST /users {name: \"Alice\"}\n    Server-&gt;&gt;DB: INSERT user (ID: 1)\n    DB--&gt;&gt;Server: Created\n    Server--&gt;&gt;Client: 201 Created (ID: 1)\n\n    Client-&gt;&gt;Server: POST /users {name: \"Alice\"}\n    Server-&gt;&gt;DB: INSERT user (ID: 2)\n    DB--&gt;&gt;Server: Created\n    Server--&gt;&gt;Client: 201 Created (ID: 2)\n\n    Note over Client,DB: Same request creates different resources!\n\n\n\n\n\n\n\n\n\n\nPUT replaces an entire resource. It requires sending the complete representation.\n\n\n#| echo: true\n#| output: true\n\nPUT https://httpbin.io/put\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Alice Updated\",\n  \"email\": \"alice.new@example.com\",\n  \"role\": \"senior-developer\",\n  \"active\": true\n}\n\n\n\nCalling PUT multiple times with the same data results in the same final state:\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\"\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\" (same result)\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\" (same result)\n\n\n\n\nPUT: Usually for updates, targets a specific resource (PUT /users/123)\nPOST: Usually for creation, targets a collection (POST /users)\nPUT: Idempotent (same result each time)\nPOST: Not idempotent (may create multiple resources)\n\n\n\n\n\n\ngraph LR\n    A[Client wants to save data] --&gt; B{Know the exact resource URI?}\n\n    B --&gt;|Yes| C[Use PUT]\n    B --&gt;|No| D[Use POST]\n\n    C --&gt; E[PUT /users/123]\n    D --&gt; F[POST /users]\n\n    E --&gt; G[Replace entire resource]\n    F --&gt; H[Server assigns new ID]\n\n    G --&gt; I[Idempotent ✓]\n    H --&gt; J[Not Idempotent ✗]\n\n    style C fill:#a5d6a7\n    style D fill:#ffcc80\n\n\n\n\n\n\n\n\n\n\nPATCH applies partial modifications to a resource. Unlike PUT, you only send the fields to update.\n\n\n#| echo: true\n#| output: true\n\nPATCH https://httpbin.io/patch\nContent-Type: application/json\n\n{\n  \"email\": \"alice.updated@example.com\"\n}\n\n\n\n#| echo: true\n#| output: true\n\nPATCH https://httpbin.io/patch\nContent-Type: application/json-patch+json\n\n[\n  { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"newemail@example.com\" },\n  { \"op\": \"add\", \"path\": \"/phone\", \"value\": \"+1234567890\" }\n]\n\n\n\n#| echo: true\n#| output: true\n\n# PUT: Must send complete resource\nPUT https://httpbin.io/put\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"role\": \"developer\",\n  \"active\": true\n}\n#| echo: true\n#| output: true\n\n# PATCH: Only send what changes\nPATCH https://httpbin.io/patch\nContent-Type: application/json\n\n{\n  \"email\": \"alice@example.com\"\n}\n\n\n\n\nDELETE removes a resource from the server.\n\n\n#| echo: true\n#| output: true\n\nDELETE https://httpbin.io/delete\n\n\n\n#| echo: true\n#| output: true\n\nDELETE https://httpbin.io/anything/users/123\n\n\n\nDeleting the same resource multiple times has the same effect:\nDELETE /users/123 → User deleted\nDELETE /users/123 → User already gone (same final state)\nDELETE /users/123 → User already gone (same final state)\nThe second and third calls might return 404 (Not Found), but the final state is the same: the resource doesn’t exist.\n\n\n\n\nHEAD is identical to GET but returns only the headers, not the body. It’s useful for checking if a resource exists or getting metadata.\n\n\n#| echo: true\n#| output: true\n\nHEAD https://httpbin.io/get\nNotice: No response body is returned, only status and headers.\n\n\n\n\nCheck if a resource exists (without downloading it)\nGet the size of a file before downloading (Content-Length header)\nCheck last modification time (Last-Modified header)\nVerify link validity\n\n\n\n\n\nOPTIONS returns the HTTP methods supported by a resource. It’s crucial for CORS (Cross-Origin Resource Sharing).\n\n\n#| echo: true\n#| output: true\n\nOPTIONS https://httpbin.io/get\nLook for the Access-Control-Allow-Methods header in the response, which lists allowed methods.\n\n\n\nBrowsers send OPTIONS automatically before certain cross-origin requests:\n#| echo: true\n#| output: true\n\nOPTIONS https://httpbin.io/post\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type\nOrigin: https://example.com\n\n\n\n\n\n\nTRACE echoes back the received request, useful for debugging:\n#| echo: true\n#| output: true\n\n# Note: httpbin doesn't support TRACE, so this may not work\nGET https://httpbin.io/get\nX-Custom-Header: debug-trace\n\n\n\nCONNECT establishes a tunnel, typically used for HTTPS through proxies. Not commonly used in APIs.\n\n\n\n\n\n\n\nGET\nHEAD\nOPTIONS\n\nSafe methods can be called without worrying about changing server state.\n\n\n\n\nGET\nPUT\nDELETE\nHEAD\nOPTIONS\n\nIdempotent methods can be safely retried if there’s a network failure.\n\n\n\n\nPOST\nPATCH (typically)\n\nThese methods require careful handling and may need special retry logic.\n\n\n\n\n\nUse GET for retrieval: Never use GET to modify data\nUse POST for creation: Create new resources with POST\nUse PUT for full replacement: Send complete resource representation\nUse PATCH for partial updates: Send only changed fields\nUse DELETE for removal: Remove resources with DELETE\nRespect idempotency: Design APIs where PUT and DELETE are truly idempotent\nUse proper status codes: Return appropriate codes for each method\n\n\n\n\nHere’s a complete CRUD (Create, Read, Update, Delete) example:\n\n\n\n\n\nflowchart TD\n    A[CRUD Operations] --&gt; B[Create]\n    A --&gt; C[Read]\n    A --&gt; D[Update]\n    A --&gt; E[Delete]\n\n    B --&gt; F[POST /users]\n    C --&gt; G[GET /users/:id]\n    D --&gt; H[PUT /users/:id]\n    D --&gt; I[PATCH /users/:id]\n    E --&gt; J[DELETE /users/:id]\n\n    F --&gt; K[201 Created]\n    G --&gt; L[200 OK]\n    H --&gt; M[200 OK]\n    I --&gt; M\n    J --&gt; N[204 No Content]\n\n    style B fill:#c8e6c9\n    style C fill:#bbdefb\n    style D fill:#fff9c4\n    style E fill:#ffccbc\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\n# Create (POST)\nPOST https://httpbin.io/anything/users\nContent-Type: application/json\n\n{\n  \"name\": \"Charlie\",\n  \"email\": \"charlie@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Read (GET)\nGET https://httpbin.io/anything/users/123\n#| echo: true\n#| output: true\n\n# Update (PUT)\nPUT https://httpbin.io/anything/users/123\nContent-Type: application/json\n\n{\n  \"name\": \"Charlie Updated\",\n  \"email\": \"charlie.new@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Partial Update (PATCH)\nPATCH https://httpbin.io/anything/users/123\nContent-Type: application/json\n\n{\n  \"email\": \"charlie.newest@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Delete (DELETE)\nDELETE https://httpbin.io/anything/users/123\n\n\n\nTry these on your own:\n\nSend a POST request with nested JSON data\nSend a PUT request and then send the same request again - verify it’s idempotent\nUse HEAD to check if https://httpbin.io/status/200 is accessible\nSend an OPTIONS request and examine the allowed methods\nCompare the difference between PUT and PATCH with different payloads\n\n\n\n\n\nGET: Retrieve data, safe and idempotent\nPOST: Create new resources, not idempotent\nPUT: Replace entire resource, idempotent\nPATCH: Partial update, typically not idempotent\nDELETE: Remove resource, idempotent\nHEAD: Get headers only, safe and idempotent\nOPTIONS: Get allowed methods, used in CORS\n\n\n\n\nNow that you understand HTTP methods, let’s explore how headers control request and response behavior in Chapter 3: HTTP Headers.\n\n\n\n\nThis chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Methods Specification\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 9: Methods\nSection 9.1: Overview\nSection 9.2: Common Method Properties\n\n9.2.1: Safe Methods\n9.2.2: Idempotent Methods\n\nSection 9.3: Method Definitions\n\n9.3.1: GET\n9.3.2: HEAD\n9.3.3: POST\n9.3.4: PUT\n9.3.5: DELETE\n9.3.6: CONNECT\n9.3.7: OPTIONS\n9.3.8: TRACE\n\n\n\n\n\n\nRFC 5789 - PATCH Method for HTTP",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#the-main-http-methods",
    "href": "chapters/02-http-methods.html#the-main-http-methods",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "Method\nPurpose\nSafe\nIdempotent\nHas Body\n\n\n\n\nGET\nRetrieve resource\nYes\nYes\nNo\n\n\nPOST\nCreate resource\nNo\nNo\nYes\n\n\nPUT\nReplace resource\nNo\nYes\nYes\n\n\nPATCH\nModify resource\nNo\nNo\nYes\n\n\nDELETE\nRemove resource\nNo\nYes\nNo\n\n\nHEAD\nGet headers only\nYes\nYes\nNo\n\n\nOPTIONS\nGet allowed methods\nYes\nYes\nNo\n\n\n\n\n\n\n\n\ngraph TD\n    A[HTTP Methods] --&gt; B[Safe Methods]\n    A --&gt; C[Unsafe Methods]\n\n    B --&gt; D[GET]\n    B --&gt; E[HEAD]\n    B --&gt; F[OPTIONS]\n\n    C --&gt; G[POST]\n    C --&gt; H[PUT]\n    C --&gt; I[PATCH]\n    C --&gt; J[DELETE]\n\n    K[Idempotent] --&gt; D\n    K --&gt; E\n    K --&gt; F\n    K --&gt; H\n    K --&gt; J\n\n    L[Not Idempotent] --&gt; G\n    L --&gt; I\n\n    style B fill:#c8e6c9\n    style C fill:#ffccbc\n    style K fill:#bbdefb\n    style L fill:#fff9c4\n\n\n\n\n\n\n\n\n\nSafe: The method doesn’t modify server state\nIdempotent: Multiple identical requests have the same effect as a single request\nHas Body: Whether the request can include a message body",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#get-method",
    "href": "chapters/02-http-methods.html#get-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "GET retrieves data from the server. It should not modify any resources.\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/get?user=alice&role=admin&status=active\n\n\n\n#| echo: true\n#| output: true\n\nGET https://httpbin.io/anything/users/123\n\n\n\n\nSafe: Reading data doesn’t change it\nIdempotent: Calling GET 100 times returns the same result (assuming no external changes)",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#post-method",
    "href": "chapters/02-http-methods.html#post-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "POST submits data to create a new resource. It’s commonly used for form submissions and API calls.\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"role\": \"developer\"\n}\n\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\n[FormParams]\nusername: alice\npassword: secret123\nremember: true\n\n\n\n#| echo: true\n#| output: true\n\nPOST https://httpbin.io/post\nContent-Type: application/json\n\n{\n  \"user\": {\n    \"name\": \"Bob\",\n    \"age\": 30\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"notifications\": true\n  },\n  \"tags\": [\"developer\", \"python\", \"http\"]\n}\n\n\n\nCalling POST multiple times creates multiple resources:\nPOST /users → Creates user (ID: 1)\nPOST /users → Creates user (ID: 2)\nPOST /users → Creates user (ID: 3)\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Server\n    participant DB as Database\n\n    Client-&gt;&gt;Server: POST /users {name: \"Alice\"}\n    Server-&gt;&gt;DB: INSERT user (ID: 1)\n    DB--&gt;&gt;Server: Created\n    Server--&gt;&gt;Client: 201 Created (ID: 1)\n\n    Client-&gt;&gt;Server: POST /users {name: \"Alice\"}\n    Server-&gt;&gt;DB: INSERT user (ID: 2)\n    DB--&gt;&gt;Server: Created\n    Server--&gt;&gt;Client: 201 Created (ID: 2)\n\n    Note over Client,DB: Same request creates different resources!",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#put-method",
    "href": "chapters/02-http-methods.html#put-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "PUT replaces an entire resource. It requires sending the complete representation.\n\n\n#| echo: true\n#| output: true\n\nPUT https://httpbin.io/put\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Alice Updated\",\n  \"email\": \"alice.new@example.com\",\n  \"role\": \"senior-developer\",\n  \"active\": true\n}\n\n\n\nCalling PUT multiple times with the same data results in the same final state:\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\"\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\" (same result)\nPUT /users/123 {\"name\": \"Alice\"} → User 123 has name \"Alice\" (same result)\n\n\n\n\nPUT: Usually for updates, targets a specific resource (PUT /users/123)\nPOST: Usually for creation, targets a collection (POST /users)\nPUT: Idempotent (same result each time)\nPOST: Not idempotent (may create multiple resources)\n\n\n\n\n\n\ngraph LR\n    A[Client wants to save data] --&gt; B{Know the exact resource URI?}\n\n    B --&gt;|Yes| C[Use PUT]\n    B --&gt;|No| D[Use POST]\n\n    C --&gt; E[PUT /users/123]\n    D --&gt; F[POST /users]\n\n    E --&gt; G[Replace entire resource]\n    F --&gt; H[Server assigns new ID]\n\n    G --&gt; I[Idempotent ✓]\n    H --&gt; J[Not Idempotent ✗]\n\n    style C fill:#a5d6a7\n    style D fill:#ffcc80",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#patch-method",
    "href": "chapters/02-http-methods.html#patch-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "PATCH applies partial modifications to a resource. Unlike PUT, you only send the fields to update.\n\n\n#| echo: true\n#| output: true\n\nPATCH https://httpbin.io/patch\nContent-Type: application/json\n\n{\n  \"email\": \"alice.updated@example.com\"\n}\n\n\n\n#| echo: true\n#| output: true\n\nPATCH https://httpbin.io/patch\nContent-Type: application/json-patch+json\n\n[\n  { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"newemail@example.com\" },\n  { \"op\": \"add\", \"path\": \"/phone\", \"value\": \"+1234567890\" }\n]\n\n\n\n#| echo: true\n#| output: true\n\n# PUT: Must send complete resource\nPUT https://httpbin.io/put\nContent-Type: application/json\n\n{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"role\": \"developer\",\n  \"active\": true\n}\n#| echo: true\n#| output: true\n\n# PATCH: Only send what changes\nPATCH https://httpbin.io/patch\nContent-Type: application/json\n\n{\n  \"email\": \"alice@example.com\"\n}",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#delete-method",
    "href": "chapters/02-http-methods.html#delete-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "DELETE removes a resource from the server.\n\n\n#| echo: true\n#| output: true\n\nDELETE https://httpbin.io/delete\n\n\n\n#| echo: true\n#| output: true\n\nDELETE https://httpbin.io/anything/users/123\n\n\n\nDeleting the same resource multiple times has the same effect:\nDELETE /users/123 → User deleted\nDELETE /users/123 → User already gone (same final state)\nDELETE /users/123 → User already gone (same final state)\nThe second and third calls might return 404 (Not Found), but the final state is the same: the resource doesn’t exist.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#head-method",
    "href": "chapters/02-http-methods.html#head-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "HEAD is identical to GET but returns only the headers, not the body. It’s useful for checking if a resource exists or getting metadata.\n\n\n#| echo: true\n#| output: true\n\nHEAD https://httpbin.io/get\nNotice: No response body is returned, only status and headers.\n\n\n\n\nCheck if a resource exists (without downloading it)\nGet the size of a file before downloading (Content-Length header)\nCheck last modification time (Last-Modified header)\nVerify link validity",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#options-method",
    "href": "chapters/02-http-methods.html#options-method",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "OPTIONS returns the HTTP methods supported by a resource. It’s crucial for CORS (Cross-Origin Resource Sharing).\n\n\n#| echo: true\n#| output: true\n\nOPTIONS https://httpbin.io/get\nLook for the Access-Control-Allow-Methods header in the response, which lists allowed methods.\n\n\n\nBrowsers send OPTIONS automatically before certain cross-origin requests:\n#| echo: true\n#| output: true\n\nOPTIONS https://httpbin.io/post\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type\nOrigin: https://example.com",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#less-common-methods",
    "href": "chapters/02-http-methods.html#less-common-methods",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "TRACE echoes back the received request, useful for debugging:\n#| echo: true\n#| output: true\n\n# Note: httpbin doesn't support TRACE, so this may not work\nGET https://httpbin.io/get\nX-Custom-Header: debug-trace\n\n\n\nCONNECT establishes a tunnel, typically used for HTTPS through proxies. Not commonly used in APIs.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#method-safety-and-idempotency-summary",
    "href": "chapters/02-http-methods.html#method-safety-and-idempotency-summary",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "GET\nHEAD\nOPTIONS\n\nSafe methods can be called without worrying about changing server state.\n\n\n\n\nGET\nPUT\nDELETE\nHEAD\nOPTIONS\n\nIdempotent methods can be safely retried if there’s a network failure.\n\n\n\n\nPOST\nPATCH (typically)\n\nThese methods require careful handling and may need special retry logic.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#best-practices",
    "href": "chapters/02-http-methods.html#best-practices",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "Use GET for retrieval: Never use GET to modify data\nUse POST for creation: Create new resources with POST\nUse PUT for full replacement: Send complete resource representation\nUse PATCH for partial updates: Send only changed fields\nUse DELETE for removal: Remove resources with DELETE\nRespect idempotency: Design APIs where PUT and DELETE are truly idempotent\nUse proper status codes: Return appropriate codes for each method",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#real-world-api-example",
    "href": "chapters/02-http-methods.html#real-world-api-example",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "Here’s a complete CRUD (Create, Read, Update, Delete) example:\n\n\n\n\n\nflowchart TD\n    A[CRUD Operations] --&gt; B[Create]\n    A --&gt; C[Read]\n    A --&gt; D[Update]\n    A --&gt; E[Delete]\n\n    B --&gt; F[POST /users]\n    C --&gt; G[GET /users/:id]\n    D --&gt; H[PUT /users/:id]\n    D --&gt; I[PATCH /users/:id]\n    E --&gt; J[DELETE /users/:id]\n\n    F --&gt; K[201 Created]\n    G --&gt; L[200 OK]\n    H --&gt; M[200 OK]\n    I --&gt; M\n    J --&gt; N[204 No Content]\n\n    style B fill:#c8e6c9\n    style C fill:#bbdefb\n    style D fill:#fff9c4\n    style E fill:#ffccbc\n\n\n\n\n\n\n#| echo: true\n#| output: true\n\n# Create (POST)\nPOST https://httpbin.io/anything/users\nContent-Type: application/json\n\n{\n  \"name\": \"Charlie\",\n  \"email\": \"charlie@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Read (GET)\nGET https://httpbin.io/anything/users/123\n#| echo: true\n#| output: true\n\n# Update (PUT)\nPUT https://httpbin.io/anything/users/123\nContent-Type: application/json\n\n{\n  \"name\": \"Charlie Updated\",\n  \"email\": \"charlie.new@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Partial Update (PATCH)\nPATCH https://httpbin.io/anything/users/123\nContent-Type: application/json\n\n{\n  \"email\": \"charlie.newest@example.com\"\n}\n#| echo: true\n#| output: true\n\n# Delete (DELETE)\nDELETE https://httpbin.io/anything/users/123",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#practice-exercises",
    "href": "chapters/02-http-methods.html#practice-exercises",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "Try these on your own:\n\nSend a POST request with nested JSON data\nSend a PUT request and then send the same request again - verify it’s idempotent\nUse HEAD to check if https://httpbin.io/status/200 is accessible\nSend an OPTIONS request and examine the allowed methods\nCompare the difference between PUT and PATCH with different payloads",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#key-takeaways",
    "href": "chapters/02-http-methods.html#key-takeaways",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "GET: Retrieve data, safe and idempotent\nPOST: Create new resources, not idempotent\nPUT: Replace entire resource, idempotent\nPATCH: Partial update, typically not idempotent\nDELETE: Remove resource, idempotent\nHEAD: Get headers only, safe and idempotent\nOPTIONS: Get allowed methods, used in CORS",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#next-steps",
    "href": "chapters/02-http-methods.html#next-steps",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "Now that you understand HTTP methods, let’s explore how headers control request and response behavior in Chapter 3: HTTP Headers.",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  },
  {
    "objectID": "chapters/02-http-methods.html#rfc-references",
    "href": "chapters/02-http-methods.html#rfc-references",
    "title": "Chapter 2: HTTP Methods",
    "section": "",
    "text": "This chapter covers concepts from the following RFCs:\n\n\n\n\n\n\nNoteHTTP Methods Specification\n\n\n\n\nRFC 9110 - HTTP Semantics\n\nSection 9: Methods\nSection 9.1: Overview\nSection 9.2: Common Method Properties\n\n9.2.1: Safe Methods\n9.2.2: Idempotent Methods\n\nSection 9.3: Method Definitions\n\n9.3.1: GET\n9.3.2: HEAD\n9.3.3: POST\n9.3.4: PUT\n9.3.5: DELETE\n9.3.6: CONNECT\n9.3.7: OPTIONS\n9.3.8: TRACE\n\n\n\n\n\n\nRFC 5789 - PATCH Method for HTTP",
    "crumbs": [
      "Home",
      "Core Concepts",
      "2. HTTP Methods"
    ]
  }
]